<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[xixitalk's snippet]]></title>
  <link href="http://xixitalk.github.io/atom.xml" rel="self"/>
  <link href="http://xixitalk.github.io/"/>
  <updated>2017-11-13T11:59:21+00:00</updated>
  <id>http://xixitalk.github.io/</id>
  <author>
    <name><![CDATA[xixitalk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[用frp代替stunnel进行服务共享和安全连接]]></title>
    <link href="http://xixitalk.github.io/blog/2017/11/13/use-frp-instead-of-stunnel/"/>
    <updated>2017-11-13T16:14:36+00:00</updated>
    <id>http://xixitalk.github.io/blog/2017/11/13/use-frp-instead-of-stunnel</id>
    <content type="html"><![CDATA[<p>需求：家里内网的服务，办公室内网可以访问。</p>

<h4 id="section">环境说明</h4>

<p>办公室电脑是 10.40.xx.xx这样的内网IP。家里路由器是有公网IP的。家里一台树莓派3（IP 192.168.1.104）接在路由器下，路由器IP是192.168.1.1 公网IP假定是180.109.114.114。路由器上配置端口映射，把端口14828映射到树莓派3的192.168.1.104上。端口号14828可以自行选择其他的，和下面保持一致即可。</p>

<!--more-->

<h4 id="section-1">原理</h4>

<p>公网主机运行一个frp服务端，开放的服务和访问端各运行一个frp客户端，两个客户端之间进行通信，通过frp的stcp机制可以同时解决内网穿透和安全连接。公网IP主机可以是家里路由器，也可以是因特网上的VPS主机。<br />
我的环境是frp服务端运行在路由器下面的树莓派上，路由器上配置了端口转发，frp服务端等同于运行在有公网IP的路由器上。</p>

<h2 id="section-2">服务配置</h2>

<p>下面以开放家里内网MEOW代理服务为例。MEOW运行在树莓派3上（192.168.1.104），端口是7788。</p>

<h3 id="frp">frp服务端配置</h3>

<p>frp服务运行在公网VPS上。因为我路由器有公网IP，并配置了端口转发，我的环境是运行在家里树莓派3上。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[common]
</span><span class="line">bind_port = 14828
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="frp1meowfrp">frp客户端1：MEOW的frp客户端配置</h3>

<p>MEOW是运行家里内网树莓派3上的HTTP代理服务。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># frpc1.ini
</span><span class="line">[common]
</span><span class="line">server_addr = 192.168.1.104
</span><span class="line">server_port = 14828
</span><span class="line">
</span><span class="line">[meow_http]
</span><span class="line">type = stcp
</span><span class="line">sk = pass_token_123
</span><span class="line">local_ip = 192.168.1.104
</span><span class="line">local_port = 7788
</span><span class="line">use_encryption = true
</span><span class="line">use_compression = true
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>pass_token_123</code>是安全密码，自行定义，和下面客户端2配置要一致。公网IP在路由器，并且14828端口开启了端口映射，所以对于192.168.1.1或公网IP 180.109.114.114的14828端口访问都会转到192.168.1.104，所以这里配置<code>server_addr</code>是192.168.1.104。如果是公网VPS，这里<code>server_addr</code>地址改成公网IP。</p>

<h3 id="frp2">frp客户端2：服务访问端</h3>

<p>客户端2运行在外部内网，比如办公室内网，是服务访问端。http_proxy是办公室上网代理，如果不需要则去掉。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># frpc2.ini
</span><span class="line">[common]
</span><span class="line">server_addr = 180.109.114.114
</span><span class="line">server_port = 14828
</span><span class="line">http_proxy = http://proxy.example.com.cn:80
</span><span class="line">
</span><span class="line">[meow_http_vistor]
</span><span class="line">type = stcp
</span><span class="line">role = vistor
</span><span class="line">server_name = meow_http
</span><span class="line">sk = pass_token_123
</span><span class="line">bind_addr = 127.0.0.1
</span><span class="line">bind_port = 8088
</span><span class="line">use_encryption = true
</span><span class="line">use_compression = true
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>MEOW是HTTP代理服务，浏览器设置http://127.0.0.1:8088就可以使用家里的MEOW服务了。如果是FTP、SSH、HTTP服务，换成对应的端口即可。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[内网穿透：从家里连接办公室电脑]]></title>
    <link href="http://xixitalk.github.io/blog/2017/11/13/link-office-from-home-via-frp/"/>
    <updated>2017-11-13T09:11:13+00:00</updated>
    <id>http://xixitalk.github.io/blog/2017/11/13/link-office-from-home-via-frp</id>
    <content type="html"><![CDATA[<p>环境说明: 办公室电脑是 10.40.xx.xx这样的内网IP，并且办公环境要通过HTTP代理才能访问外网。我没有公网IP的VPS，但是家里路由器是有公网IP的，可以借路由器的公网IP进行内网穿透。</p>

<h4 id="section">环境</h4>

<p>家里一台树莓派3（IP 192.168.1.104）接在路由器下，路由器IP是192.168.1.1  公网IP假定是180.109.114.114。路由器上配置端口映射，把14827和14828都映射到树莓派3的192.168.1.104上，端口号可以自行选择其他的，和下面保持一致即可。</p>

<p>内网穿透使用<a href="https://github.com/fatedier/frp/blob/master/README_zh.md">frp</a>软件。frp编译好的二进制下载地址<a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a>，树莓派使用<code>frp_0.13.0_linux_arm.tar.gz</code>。</p>

<!--more-->

<h4 id="frp-server">运行frp server</h4>

<p>树莓派运行frp server，配置如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[common]
</span><span class="line">bind_port = 14828
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>配置如上，保存为config.ini，运行执行<code>nohup ./frps -c ./conf.ini -L ./log.txt &amp;</code></p>

<h4 id="frp-client">运行frp client</h4>

<p>办公室运行frp client，配置如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[common]
</span><span class="line">server_addr = 180.109.114.114
</span><span class="line">server_port = 14828
</span><span class="line">http_proxy = http://proxy.example.com.cn:80
</span><span class="line">
</span><span class="line">[rdp]
</span><span class="line">type = tcp
</span><span class="line">local_ip = 127.0.0.1
</span><span class="line">local_port = 3389
</span><span class="line">remote_port = 14827
</span><span class="line">use_encryption = true
</span><span class="line">use_compression = true
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>配置说明：180.109.114.114为路由器公网IP，14828是frp服务的侦听端口；http_proxy是办公室访问因特网要通过HTTP代理，如果不需要直接去掉；3389是windows远程桌面的端口，其他服务换对应端口。</p>

<p>配置如上，保存为frpc.ini，运行<code>frpc.exe -c frpc.ini</code>。</p>

<h4 id="section-1">测试连接</h4>

<p>在家里Windows电脑上打开远程桌面登录框，IP输入：192.168.1.104:14827，或者192.168.1.1:14827登录。</p>

<p>或者在外边因特网环境，IP输入：180.109.114.114:14827登录。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[getaddrinfo 返回Name or service not known错误]]></title>
    <link href="http://xixitalk.github.io/blog/2017/09/19/getaddrinfo-error/"/>
    <updated>2017-09-19T14:23:57+00:00</updated>
    <id>http://xixitalk.github.io/blog/2017/09/19/getaddrinfo-error</id>
    <content type="html"><![CDATA[<p>关键词：glibc  getaddrinfo</p>

<p>同事反馈说程序调用<code>getaddrinfo</code>函数出错（arm linux平台），glibc是2.20，我想glibc不会这么弱，这么标准的函数都有问题。</p>

<!--more-->

<p>从网上找了一个getaddrinfo的<a href="http://beej.us/guide/bgnet/examples/showip.c">实例代码</a>，用arm交叉编译链编译后，执行，确实getaddrinfo出错，提示信息<code>Name or service not known</code>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">arm-linux-gcc showip.c -o getaddrinfo
</span><span class="line">./getaddrinfo baidu.com
</span><span class="line">getaddrinfo: Name or service not known
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>从strace分析getaddrinfo执行流程，和PC linux上对比，发现resolv.conf流程后，缺少socket流程。</p>

<p>下面是出问题的strace流程。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
<span class="line-number">70</span>
<span class="line-number">71</span>
<span class="line-number">72</span>
<span class="line-number">73</span>
<span class="line-number">74</span>
<span class="line-number">75</span>
<span class="line-number">76</span>
<span class="line-number">77</span>
<span class="line-number">78</span>
<span class="line-number">79</span>
<span class="line-number">80</span>
<span class="line-number">81</span>
<span class="line-number">82</span>
<span class="line-number">83</span>
<span class="line-number">84</span>
<span class="line-number">85</span>
<span class="line-number">86</span>
<span class="line-number">87</span>
<span class="line-number">88</span>
<span class="line-number">89</span>
<span class="line-number">90</span>
<span class="line-number">91</span>
<span class="line-number">92</span>
<span class="line-number">93</span>
<span class="line-number">94</span>
<span class="line-number">95</span>
<span class="line-number">96</span>
<span class="line-number">97</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$./strace ./getaddrinfo baidu.com
</span><span class="line">execve("./getaddrinfo", ["./getaddrinfo", "baidu.com"], [/* 12 vars */]) = 0
</span><span class="line">brk(0)                                  = 0x11000
</span><span class="line">uname({sysname="Linux", nodename="root", ...}) = 0
</span><span class="line">mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb6fa8000
</span><span class="line">access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)
</span><span class="line">open("/usr/local/lib/tls/v6l/vfp/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">stat64("/usr/local/lib/tls/v6l/vfp", 0xbed8c4c0) = -1 ENOENT (No such file or directory)
</span><span class="line">open("/usr/local/lib/tls/v6l/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">stat64("/usr/local/lib/tls/v6l", 0xbed8c4c0) = -1 ENOENT (No such file or directory)
</span><span class="line">open("/usr/local/lib/tls/vfp/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">stat64("/usr/local/lib/tls/vfp", 0xbed8c4c0) = -1 ENOENT (No such file or directory)
</span><span class="line">open("/usr/local/lib/tls/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">stat64("/usr/local/lib/tls", 0xbed8c4c0) = -1 ENOENT (No such file or directory)
</span><span class="line">open("/usr/local/lib/v6l/vfp/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">stat64("/usr/local/lib/v6l/vfp", 0xbed8c4c0) = -1 ENOENT (No such file or directory)
</span><span class="line">open("/usr/local/lib/v6l/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">stat64("/usr/local/lib/v6l", 0xbed8c4c0) = -1 ENOENT (No such file or directory)
</span><span class="line">open("/usr/local/lib/vfp/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">stat64("/usr/local/lib/vfp", 0xbed8c4c0) = -1 ENOENT (No such file or directory)
</span><span class="line">open("/usr/local/lib/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">stat64("/usr/local/lib", {st_mode=S_IFDIR|0775, st_size=0, ...}) = 0
</span><span class="line">open("/usr/lib/tls/v6l/vfp/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">stat64("/usr/lib/tls/v6l/vfp", 0xbed8c4c0) = -1 ENOENT (No such file or directory)
</span><span class="line">open("/usr/lib/tls/v6l/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">stat64("/usr/lib/tls/v6l", 0xbed8c4c0)  = -1 ENOENT (No such file or directory)
</span><span class="line">open("/usr/lib/tls/vfp/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">stat64("/usr/lib/tls/vfp", 0xbed8c4c0)  = -1 ENOENT (No such file or directory)
</span><span class="line">open("/usr/lib/tls/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">stat64("/usr/lib/tls", 0xbed8c4c0)      = -1 ENOENT (No such file or directory)
</span><span class="line">open("/usr/lib/v6l/vfp/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">stat64("/usr/lib/v6l/vfp", 0xbed8c4c0)  = -1 ENOENT (No such file or directory)
</span><span class="line">open("/usr/lib/v6l/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">stat64("/usr/lib/v6l", 0xbed8c4c0)      = -1 ENOENT (No such file or directory)
</span><span class="line">open("/usr/lib/vfp/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">stat64("/usr/lib/vfp", 0xbed8c4c0)      = -1 ENOENT (No such file or directory)
</span><span class="line">open("/usr/lib/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">stat64("/usr/lib", {st_mode=S_IFDIR|0775, st_size=0, ...}) = 0
</span><span class="line">open("/lib/tls/v6l/vfp/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">stat64("/lib/tls/v6l/vfp", 0xbed8c4c0)  = -1 ENOENT (No such file or directory)
</span><span class="line">open("/lib/tls/v6l/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">stat64("/lib/tls/v6l", 0xbed8c4c0)      = -1 ENOENT (No such file or directory)
</span><span class="line">open("/lib/tls/vfp/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">stat64("/lib/tls/vfp", 0xbed8c4c0)      = -1 ENOENT (No such file or directory)
</span><span class="line">open("/lib/tls/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">stat64("/lib/tls", 0xbed8c4c0)          = -1 ENOENT (No such file or directory)
</span><span class="line">open("/lib/v6l/vfp/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">stat64("/lib/v6l/vfp", 0xbed8c4c0)      = -1 ENOENT (No such file or directory)
</span><span class="line">open("/lib/v6l/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">stat64("/lib/v6l", 0xbed8c4c0)          = -1 ENOENT (No such file or directory)
</span><span class="line">open("/lib/vfp/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">stat64("/lib/vfp", 0xbed8c4c0)          = -1 ENOENT (No such file or directory)
</span><span class="line">open("/lib/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
</span><span class="line">read(3, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0(\0\1\0\0\0\\f\1\0004\0\0\0"..., 512) = 512
</span><span class="line">fstat64(3, {st_mode=S_IFREG|0775, st_size=1218140, ...}) = 0
</span><span class="line">mmap2(NULL, 1254784, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0xb6e50000
</span><span class="line">mprotect(0xb6f75000, 32768, PROT_NONE)  = 0
</span><span class="line">mmap2(0xb6f7d000, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x125000) = 0xb6f7d000
</span><span class="line">mmap2(0xb6f80000, 9600, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0xb6f80000
</span><span class="line">close(3)                                = 0
</span><span class="line">mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb6fa7000
</span><span class="line">set_tls(0xb6fa74c0, 0xb6fa7ba8, 0xb6faa050, 0xb6fa74c0, 0xb6faa050) = 0
</span><span class="line">mprotect(0xb6f7d000, 8192, PROT_READ)   = 0
</span><span class="line">mprotect(0xb6fa9000, 4096, PROT_READ)   = 0
</span><span class="line">socket(PF_LOCAL, SOCK_STREAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0) = 3
</span><span class="line">connect(3, {sa_family=AF_LOCAL, sun_path="/var/run/nscd/socket"}, 110) = -1 ENOENT (No such file or directory)
</span><span class="line">close(3)                                = 0
</span><span class="line">socket(PF_LOCAL, SOCK_STREAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0) = 3
</span><span class="line">connect(3, {sa_family=AF_LOCAL, sun_path="/var/run/nscd/socket"}, 110) = -1 ENOENT (No such file or directory)
</span><span class="line">close(3)                                = 0
</span><span class="line">brk(0)                                  = 0x11000
</span><span class="line">brk(0x32000)                            = 0x32000
</span><span class="line">open("/etc/nsswitch.conf", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">open("/etc/host.conf", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">getpid()                                = 93
</span><span class="line">open("/etc/resolv.conf", O_RDONLY|O_CLOEXEC) = 3
</span><span class="line">fstat64(3, {st_mode=S_IFREG|0644, st_size=104, ...}) = 0
</span><span class="line">mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb6fa6000
</span><span class="line">read(3, "nameserver 10.30.1.9\nsearch baidu."..., 4096) = 104
</span><span class="line">read(3, "", 4096)                       = 0
</span><span class="line">close(3)                                = 0
</span><span class="line">munmap(0xb6fa6000, 4096)                = 0
</span><span class="line">open("/usr/local/lib/libnss_dns.so.2", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">open("/usr/lib/libnss_dns.so.2", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">open("/lib/libnss_dns.so.2", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">open("/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">open("/lib/libnss_dns.so.2", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">open("/usr/lib/libnss_dns.so.2", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">open("/usr/local/lib/libnss_files.so.2", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">open("/usr/lib/libnss_files.so.2", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">open("/lib/libnss_files.so.2", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">open("/lib/libnss_files.so.2", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">open("/usr/lib/libnss_files.so.2", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
</span><span class="line">write(2, "getaddrinfo: Name or service not"..., 39getaddrinfo: Name or service not known
</span><span class="line">) = 39
</span><span class="line">exit_group(2)                           = ?
</span><span class="line">+++ exited with 2 +++
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>PC linux正常的getaddrinfo strace流程，resolv.conf有<code>sendmmsg</code>和<code>recvfrom</code>流程，正是这个流程获取到了IP。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class=""><span class="line">open("/etc/resolv.conf", O_RDONLY|O_CLOEXEC) = 3
</span><span class="line">fstat(3, {st_mode=S_IFREG|0644, st_size=224, ...}) = 0
</span><span class="line">read(3, "# Dynamic resolv.conf(5) file fo"..., 4096) = 224
</span><span class="line">read(3, "", 4096)                       = 0
</span><span class="line">close(3)                                = 0
</span><span class="line">uname({sysname="Linux", nodename="root", ...}) = 0
</span><span class="line">socket(PF_INET, SOCK_DGRAM|SOCK_NONBLOCK, IPPROTO_IP) = 3
</span><span class="line">connect(3, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr("10.41.213.131")}, 16) = 0
</span><span class="line">poll([{fd=3, events=POLLOUT}], 1, 0)    = 1 ([{fd=3, revents=POLLOUT}])
</span><span class="line">sendmmsg(3, {msg_name(0)=NULL, msg_iov(1)=[{"\261\235\1\0\0\1\0\0\0\0\0\0\5baidu\3com\0\0\1\0\1", 31}], msg_controllen=0, msg_flags=0}, 31}, {msg_name(0)=NULL, msg_iov(1)=[{"\321\3\1\0\0\1\0\0\0\0\0\0\5baidu\3com\0\0\34\0\1", 31}], msg_controllen=0, msg_flags=0}, 31}, 2, MSG_NOSIGNAL) = 2
</span><span class="line">poll([{fd=3, events=POLLIN}], 1, 5000)  = 1 ([{fd=3, revents=POLLIN}])
</span><span class="line">ioctl(3, FIONREAD, [47])                = 0
</span><span class="line">recvfrom(3, "\261\235\201\200\0\1\0\1\0\0\0\0\5baidu\3com\0\0\1\0\1\300"..., 2048, 0, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr("10.41.213.131")}, [16]) = 47
</span><span class="line">poll([{fd=3, events=POLLIN}], 1, 4998)  = 1 ([{fd=3, revents=POLLIN}])
</span><span class="line">ioctl(3, FIONREAD, [81])                = 0
</span><span class="line">recvfrom(3, "\321\3\201\200\0\1\0\0\0\1\0\0\5baidu\3com\0\0\34\0\1\300"..., 65536, 0, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr("10.41.213.131")}, [16]) = 81
</span><span class="line">close(3)                                = 0
</span><span class="line">fstat(1, {st_mode=S_IFREG|0664, st_size=7635, ...}) = 0
</span><span class="line">write(1, "IP addresses for baidu.com:\n"..., 52IP addresses for baidu.com:
</span><span class="line">
</span><span class="line">  IPv4: 10.30.1.61
</span><span class="line">) = 52
</span><span class="line">exit_group(0)                           = ?
</span><span class="line">+++ exited with 0 +++
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>对比两个strace的打印，发现出问题的平台提示<code>libresolv.so.2</code>和<code>libnss_dns.so.2</code>找不到，这两个库看起来和域名解析有关，从编译链里找到这两个库<code>libnss_dns-2.20.so</code>和<code>libresolv-2.20.so</code>，放到开发板<code>/lib</code>目录，并创建好软连接。再次运行<code> ./getaddrinfo baidu.com</code>发现正常了。看来就是<code>getaddrinfo</code>依赖<code>libnss_dns</code>和<code>libresolv</code>两个动态库。坑爹的是<code>ldd getaddrinfo</code>并发现不了getaddrinfo程序依赖这两个动态库。</p>

<p><code>/lib</code>新增库如下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">libnss_dns-2.20.so
</span><span class="line">libnss_dns.so.2 -&gt; libnss_dns-2.20.so
</span><span class="line">libresolv-2.20.so
</span><span class="line">libresolv.so.2 -&gt; libresolv-2.20.so
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>[root@~ ]# ./getaddrinfo baidu.com
IP addresses for baidu.com
IPv4: 10.30.1.19</p>

<h3 id="section">参考资料</h3>

<p><a href="http://beej-zhtw.netdpi.net/05-system-call-or-bust/5-1-getaddrinfo-start">http://beej-zhtw.netdpi.net/05-system-call-or-bust/5-1-getaddrinfo-start</a></p>

<p><a href="http://beej.us/guide/bgnet/examples/showip.c">http://beej.us/guide/bgnet/examples/showip.c</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[树莓派3上编译haproxy]]></title>
    <link href="http://xixitalk.github.io/blog/2017/09/03/compile-haproxy-on-raspberry3/"/>
    <updated>2017-09-03T06:01:08+00:00</updated>
    <id>http://xixitalk.github.io/blog/2017/09/03/compile-haproxy-on-raspberry3</id>
    <content type="html"><![CDATA[<p>最近发现树莓派上haproxy有点问题，Google Play下载有些不正常。所以想更新编译haproxy。raspbian软件仓库的haproxy的版本比较低，所以直接下载haproxy源代码编译。更新过程记录下来。</p>

<!--more-->

<p>为了配置省事，建议先安装raspbian软件仓库里的haproxy，然后编译好的haproxy的直接覆盖，这样启动配置不用费心配置。</p>

<p>1、下载源代码并解压</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">wget http://www.haproxy.org/download/1.7/src/haproxy-1.7.9.tar.gz
</span><span class="line">tar xzvf haproxy-1.7.9.tar.gz
</span><span class="line">cd haproxy-1.7.9/
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>2、编译</p>

<p>haproxy不能直接make，需要带配置参数。先查看已经安装的haproxy的编译参数。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">haproxy -vv OPTIONS = USE_GETADDRINFO=1
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>执行上面的命令会得到类似以下信息。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Build options :
</span><span class="line">  TARGET  = linux2628
</span><span class="line">  CPU     = generic
</span><span class="line">  CC      = gcc
</span><span class="line">  CFLAGS  = -O2 -g -fno-strict-aliasing -Wdeclaration-after-statement
</span><span class="line">  OPTIONS =
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>make编译</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">make  TARGET=linux2628   CPU=generic  CFLAGS="-O2 -g -fno-strict-aliasing -Wdeclaration-after-statement"
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>正常编译完，在haproxy-1.7.9目录下就会生成haproxy可执行文件。用<code>./haproxy -vv</code>查看编译好的haproxy版本号。</p>

<p>3、替换系统里的haproxy</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$which haproxy
</span><span class="line">/usr/sbin/haproxy
</span><span class="line">$sudo service haproxy stop
</span><span class="line">$sudo cp ./haproxy /usr/sbin/haproxy
</span><span class="line">$sudo service haproxy start
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>4、haproxy负载平衡shadowsocks配置参考</p>

<p><code>14826</code>是haproxy提供的端口，<code>12222</code>是haproxy的状态web端口，可以用浏览器访问http://IP:12222查看haproxy状态。<code>j1.vps.com</code>等是多个SS server端。SS local访问haproxy的<code>14826</code>端口，IP为haproxy的侦听IP，SS local其他配置和直接访问SS server是一样的。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
</pre></td><td class="code"><pre><code class=""><span class="line">global
</span><span class="line">ulimit-n 51200
</span><span class="line">defaults
</span><span class="line">log global
</span><span class="line">mode tcp
</span><span class="line">option dontlognull
</span><span class="line">balance roundrobin
</span><span class="line">option persist
</span><span class="line">timeout connect 10000
</span><span class="line">timeout client 150000
</span><span class="line">timeout server 150000
</span><span class="line">
</span><span class="line">listen stats
</span><span class="line">bind *:12222
</span><span class="line">mode http
</span><span class="line">stats enable
</span><span class="line">stats uri /
</span><span class="line">stats refresh 10s
</span><span class="line">
</span><span class="line">retries 1
</span><span class="line">option redispatch
</span><span class="line">frontend ss-in
</span><span class="line">bind *:14826
</span><span class="line">default_backend ss-out
</span><span class="line">backend ss-out
</span><span class="line">server j1 j1.vps.com:29777 maxconn 20480 weight 1
</span><span class="line">server j2 j2.vps.com:29777 maxconn 20480 weight 100
</span><span class="line">server us0 us0.vps.com:29777 maxconn 20480 weight 1 backup
</span><span class="line">server us1 us1.vps.com:29777 maxconn 20480 weight 1 backup
</span><span class="line">server us2 us2.vps.com:29777 maxconn 20480 weight 1 backup
</span><span class="line">server us3 us3.vps.com:29777 maxconn 20480 weight 1 backup
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[当小孩吞吃了一个红枣核]]></title>
    <link href="http://xixitalk.github.io/blog/2017/08/28/When-a-child-eat-a-chinese-date-stone/"/>
    <updated>2017-08-28T10:51:54+00:00</updated>
    <id>http://xixitalk.github.io/blog/2017/08/28/When-a-child-eat-a-chinese-date-stone</id>
    <content type="html"><![CDATA[<p><strong>不要给小孩吃红枣！不要给小孩吃红枣！不要给小孩吃红枣！</strong></p>

<!--more-->

<p>新疆红枣的枣核是那种两头尖尖的长枣核（大于2厘米），小孩吞吃很危险。</p>

<p>上周一天晚上儿子吞吃了一颗枣核，枣是新疆红枣，枣核扁长（约2厘米），两头尖尖。因为担心肠穿孔风险，从明基医院辗转到儿童医院，第二天胃镜没有找到（离吃红枣22小时），最后第三天自己拉出来了（离吃枣48小时）。我在反思自己，除了最大的错误是给小孩吃红枣外，治疗的抉择事后仔细想想也很不合理，胃镜本不是必须，我对<strong>市儿童医院</strong>上来就开<strong>病危住院单</strong>也颇有微词。事后治疗的措施建议发在网上给其他人参考。</p>

<p>如果小孩吞吃了枣核，去医院挂<strong>消化科</strong>，其他科不管用，<strong>胃镜手术也在消化科</strong>。如果<strong>肠穿孔治疗在外科</strong>，因为需要腹腔手术。</p>

<ol>
  <li>如果有疼痛症状，怀疑卡在食管、扎在胃壁上，选择胃镜。胃镜手术要提前禁水禁食6个小时。胃镜手术后要吃流质半流质易消化食物4天。</li>
  <li>如果没有症状，可以选择自行拉出。原因是小孩胃镜要全身麻醉，麻醉和胃镜对胃粘膜的损伤不得不考虑。
具体措施：住院观察，多吃粗纤维食物，检查每次大便，看看枣核是否拉出，化验每次大便，看胃肠是否出血。如果有穿孔风险医院及时处理。</li>
  <li>如果离吃的时间比较长（大于12小时），可以采取自行拉出。
原因是如果做胃镜，枣核不一定在胃里，花钱小孩还受罪。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[华硕路由器外接硬盘格式化成什么文件系统最好]]></title>
    <link href="http://xixitalk.github.io/blog/2016/11/12/How-to-Format-Usb-Drive-for-asus-router/"/>
    <updated>2016-11-12T15:33:41+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/11/12/How-to-Format-Usb-Drive-for-asus-router</id>
    <content type="html"><![CDATA[<p>关键词：华硕 AC66U AC68U 外接硬盘 文件系统 EXT4 EXT3 NTFS FAT32</p>

<p>我有一台华硕AC66U，外接了一块2.5吋移动硬盘。不知道格式化成什么格式最好？硬盘本来是EXT4格式的，插上发现没有自动挂载，搜索发现，AC66U建议用<strong>EXT3</strong>格式，而AC68U建议用<strong>EXT4</strong>格式。果然格式成EXT3后，插上AC66U后<strong>自动挂载</strong>了。其他华硕机器未验证。</p>

<!--more-->

<blockquote>
  <p>For usb hdd Mipsel devices is EXT3 (RT-N16, RT-N66U, RT-AC66U and all other versions: /R /W)</p>
</blockquote>

<p>RT-N16, RT-N66U, RT-AC66U是<a href="https://en.wikipedia.org/wiki/MIPS_instruction_set">MIPS</a>架构的CPU，建议最好格式化成EXT3.</p>

<blockquote>
  <p>For usb hdd ARM devices is EXT4 (RT-AC56U, RT-AC68U, RT-AC87U, RT-AC88U, RT-AC3200, RT-AC5300 and all other versions: /P /R /W)</p>
</blockquote>

<p>RT-AC56U, RT-AC68U, RT-AC87U, RT-AC88U, RT-AC3200, RT-AC5300是<a href="https://en.wikipedia.org/wiki/ARM_architecture">ARM</a>架构的CPU，建议最好格式化成EXT4.</p>

<p>华硕路由器系统是Linux，对windows的NTFS和FAT32支持并不好，所以建议外接硬盘使用EXT4或者EXT3，如果都不支持也许应该升级路由器了。</p>

<h2 id="section">参考文章</h2>

<p><a href="https://www.hqt.ro/how-to-format-usb-drive/">How to Format Usb Drive</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pkcs11-helper编译]]></title>
    <link href="http://xixitalk.github.io/blog/2016/11/01/pkcs11-helper-build/"/>
    <updated>2016-11-01T18:37:08+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/11/01/pkcs11-helper-build</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/OpenSC/pkcs11-helper/releases">pkcs11-helper</a>也真是的，软件包里<code>INSTALL</code>里说用<code>./configure</code>生成<code>Makefile</code>，但是软件包还没有<code>configure</code>文件，需要<code>autoreconf</code>生成<code>configure</code>文件。妈蛋，<code>INSTALL</code>多写一句<code>autoreconf -ivf</code>会死吗？</p>

<!--more-->

<h1 id="section">准备</h1>

<p>确保系统安装了<code>autoconf</code> <code>automake</code> <code>libtool</code></p>

<h1 id="section-1">下载源代码解压</h1>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$wget https://github.com/OpenSC/pkcs11-helper/archive/pkcs11-helper-1.10.tar.gz
</span><span class="line">$tar -zxvf pkcs11-helper-1.10.tar.gz
</span><span class="line">$cd pkcs11-helper-pkcs11-helper-1.10
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="makefile">生成Makefile</h1>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$autoreconf -ivf
</span><span class="line">$./configure
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-2">编译安装</h1>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$make
</span><span class="line">$make install
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h1 id="section-3">参考</h1>

<p><a href="https://github.com/OpenSC/pkcs11-helper/issues/2">https://github.com/OpenSC/pkcs11-helper/issues/2</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[西部数据硬盘Load_Cycle_Count增长过快的问题]]></title>
    <link href="http://xixitalk.github.io/blog/2016/10/31/Western-Digital-problems/"/>
    <updated>2016-10-31T08:39:21+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/10/31/Western-Digital-problems</id>
    <content type="html"><![CDATA[<p>关键词：硬盘 西部数据 希捷 东芝 </p>

<p>我有一块西部数据的3.5寸硬盘，同时有一块笔记本淘汰下来的东芝的2.5寸硬盘，关键数据用这两个硬盘进行备份。最近东芝的硬盘偶尔读取失败，所以寻思再买一块硬盘替代东芝的这块硬盘。于是在网上搜索到底是买西部数据还是希捷，还是东芝的硬盘。搜索发现了西部数据硬盘曾经有“Load_Cycle_Count”的问题:<a href="https://blog.vandenbrand.org/2012/04/05/western-digital-green-caviar-wd10eads-and-hdparm-problems/">Western Digital Green Caviar WD10EADS and hdparm problems</a>
，一看我用着的这块西部数据硬盘恰恰中招了，并且寿命快终结了。</p>

<!--more-->

<p>西部数据官方网站对这个问题的解释：<a href="http://support.wdc.com/knowledgebase/answer.aspx?ID=5357">The S.M.A.R.T Attribute 193 Load/Unload counter keeps increasing on a SATA 2 hard drive</a></p>

<p>受影响的型号：</p>

<ol>
  <li>WD20EADS</li>
  <li>WD20EARS</li>
  <li>WD15EADS</li>
  <li>WD15EARS</li>
  <li>WD10EADS</li>
  <li>WD10EARS</li>
  <li>WD8000AARS</li>
  <li>WD7500AADS</li>
  <li>WD7500AARS</li>
  <li>WD6400AADS</li>
  <li>WD6400AARS</li>
  <li>WD5000AADS</li>
  <li>WD5000AARS</li>
</ol>

<p>我的硬盘型号是<code>Device Model:     WDC WD20EARS-00MVWB1</code>，2T的3.5寸硬盘。我买的是西部数据 Elements Desktop 3.5寸外置硬盘2T （WDBAAU0020HBK），专门为树莓派买的，所以直接买的是西部数据外置硬盘，USB接口输出，里面是一块绿盘<code>WD20EARS-00MVWB1</code>，购买时间是2011.8.18号，到目前已经5年了。</p>

<p>今天（2016.10.31）SMART信息如下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
</pre></td><td class="code"><pre><code class=""><span class="line">SMART Attributes Data Structure revision number: 16
</span><span class="line">Vendor Specific SMART Attributes with Thresholds:
</span><span class="line">ID# ATTRIBUTE_NAME          FLAG     VALUE WORST THRESH TYPE      UPDATED  WHEN_FAILED RAW_VALUE
</span><span class="line">  1 Raw_Read_Error_Rate     0x002f   200   200   051    Pre-fail  Always       -       0
</span><span class="line">  3 Spin_Up_Time            0x0027   166   160   021    Pre-fail  Always       -       6691
</span><span class="line">  4 Start_Stop_Count        0x0032   091   091   000    Old_age   Always       -       9326
</span><span class="line">  5 Reallocated_Sector_Ct   0x0033   200   200   140    Pre-fail  Always       -       0
</span><span class="line">  7 Seek_Error_Rate         0x002e   200   200   000    Old_age   Always       -       0
</span><span class="line">  9 Power_On_Hours          0x0032   059   059   000    Old_age   Always       -       30290
</span><span class="line"> 10 Spin_Retry_Count        0x0032   100   100   000    Old_age   Always       -       0
</span><span class="line"> 11 Calibration_Retry_Count 0x0032   100   100   000    Old_age   Always       -       0
</span><span class="line"> 12 Power_Cycle_Count       0x0032   100   100   000    Old_age   Always       -       789
</span><span class="line">192 Power-Off_Retract_Count 0x0032   200   200   000    Old_age   Always       -       12
</span><span class="line">193 Load_Cycle_Count        0x0032   001   001   000    Old_age   Always       -       904905
</span><span class="line">194 Temperature_Celsius     0x0022   125   082   000    Old_age   Always       -       25
</span><span class="line">196 Reallocated_Event_Count 0x0032   200   200   000    Old_age   Always       -       0
</span><span class="line">197 Current_Pending_Sector  0x0032   200   200   000    Old_age   Always       -       0
</span><span class="line">198 Offline_Uncorrectable   0x0030   200   200   000    Old_age   Offline      -       0
</span><span class="line">199 UDMA_CRC_Error_Count    0x0032   200   200   000    Old_age   Always       -       0
</span><span class="line">200 Multi_Zone_Error_Rate   0x0008   200   200   000    Old_age   Offline      -       0
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>通电时间（Power_On_Hours）<strong>30290</strong>小时，折合3年多，对于5年多24/7接在树莓派上，也算正常。关键是Load_Cycle_Count，已经<strong>904905</strong>，90多万了。有地方说Load_Cycle_Count寿命3.5寸是30万，2.5寸是60万，我这个已经是90多万了。</p>

<p>西部数据Load_Cycle_Count增长多快的问题解决办法就是的就是官方提供的<code>wdidle3.exe</code>工具，增大休眠时间或者关闭绿盘的定时休眠功能。windows平台自行搜索使用教程。</p>

<p>西部数据官方没有提供linux下的工具，只提供windows下的工具，并且<code>wdidle3.exe</code>命令不能指定硬盘，一运行全部硬盘全部影响，建议不相关的硬盘拔掉（这是啥傻逼命令）。</p>

<p>有一个非官方的<a href="http://idle3-tools.sourceforge.net/">linux wdidle3工具</a>，开源的，可以linux平台编译，可以指定硬盘。但是发现运行的时候提示<code>HDIO_DRIVE_CMD(identify) failed: Invalid argument</code>设置失败，这个应该是<strong>西部数据SATA转USB接口的问题</strong>，如果是直接SATA接口应该没有问题，我懒得折腾了。</p>

<p>我现在成<strong>西部数据黑了</strong>，原因有三：一个是因为<code>Load_Cycle_Count</code>的问题，这么严重的问题难道都不召回吗？第二我买的Elements Desktop，官方的SATA转USB接口，使用linux最常用的硬盘工具<code>hdparm</code>竟然提示错误，不可理解。上面<code>wdidle3</code>报的一样的错误。第三真的对红紫蓝绿盘挑选厌倦了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$sudo hdparm -i /dev/sdb
</span><span class="line">
</span><span class="line">/dev/sdb:
</span><span class="line"> HDIO_GET_IDENTITY failed: Invalid argument
</span><span class="line">$sudo hdparm -C /dev/sdb
</span><span class="line">
</span><span class="line">/dev/sdb:
</span><span class="line"> drive state is:  unknown
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我现在买了一块<strong>希捷</strong>的<code>ST4000DM000</code>，4T容量，依据<a href="https://www.backblaze.com/blog/hard-drive-reliability-stats-q1-2016/">backblaze的数据</a>，希捷的<code>ST4000DM000</code>样本足够大，出错率低。加上<strong>绿联</strong>的SATA转USB线，外接12V2A供电，目前接树莓派上使用正常，<code>hdparm</code>设置也正常，推荐使用。就不知道希捷这块<code>ST4000DM000中国专供版</code>是否和国外的品质一致了。</p>

<p>同时在这里吐槽一下SSK的2.5寸硬盘盒，竟然<code>smartctl</code>读取东芝硬盘SMART信息都读不到。所以希捷3.5寸硬盘SATA转USB我没有再考虑SSK了，买了<strong>绿联</strong>的转接线。</p>

<p><strong>2T西部数据硬盘的数据已经备份，静待他的报废</strong>，有地方说Load_Cycle_Count超过1百万会出问题，拭目以待。</p>

<p><strong>后续1</strong>：我启动<code>hd-idle</code>服务后，西部数据这块硬盘<code>Load_Cycle_Count</code>一天竟然只增加了3，通电时间增加了2小时，之前<code>Load_Cycle_Count</code>每天平均应该是495（904905/5/365），这可能和我把平常读写硬盘的程序（btsync server）停掉了有关系，硬盘休眠时间增加了，但愿它多撑一段时间吧。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编译stunnel]]></title>
    <link href="http://xixitalk.github.io/blog/2016/10/19/compile-stunnel-from-source/"/>
    <updated>2016-10-19T09:21:51+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/10/19/compile-stunnel-from-source</id>
    <content type="html"><![CDATA[<p>现在最新的stunnel是v5.36，而很多平台都还是<code>stunnel4</code></p>

<!--more-->

<p><a href="https://www.stunnel.org/downloads/stunnel-5.36.tar.gz">下载</a>stunnel-5.36.tar.gz，解压。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">wget https://www.stunnel.org/downloads/stunnel-5.36.tar.gz
</span><span class="line">tar -zxvf stunnel-5.36.tar.gz
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>用<code>./configure --help</code>查看编译配置选项。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cd stunnel-5.36
</span><span class="line">./configure --help
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>配置选项中<code>--with-threads</code>可以配置成<code>ucontext</code>、<code>pthread</code>或者<code>fork</code>，默认是<code>pthread</code>。如果是<code>pthread</code>模式，创建一个线程处理每个连接；如果是<code>fork</code>模式，创建一个进程处理每个连接。用<code>ps aux | grep stunnel</code>查看，如果很多个<code>stunnel</code>进程，则是<code>fork</code>模式；如果只有一个<code>stunnel</code>进程，那就是<code>ucontext</code>或者<code>pthread</code>模式。<code>ucontext</code>实现了用户空间一个进程中上下文切换，用这种机制可以实现协程（Coroutine），从资源利用上来说<code>ucontext</code>比<code>pthread</code>和<code>fork</code>更好一点。<code>fork</code>方式稳定性和安全性应该最好，一是代码最简单，二是进程独立空间。<code>pthread</code>是默认配置，稳定性也有保障。</p>

<p>用<code>configure</code>生成<code>Makefile</code>，下面配置选项含义：禁用<code>ipv6</code>，禁用<a href="https://en.wikipedia.org/wiki/Federal_Information_Processing_Standards" title="fips">fips</a>，禁用TCP Wrappers，每个网络连接创建一个线程处理。选项根据自己需要增删。</p>

<p>备注：TCP Wrappers作用是用<code>/etc/hosts.allow</code> 和 <code>/etc/hosts.deny</code>进行IP地址过滤，属于安全增强。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">./configure --disable-ipv6 --disable-fips --disable-libwrap --with-threads=pthread
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>生成<code>Makefile</code>之后，<code>make</code>进行编译。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">make
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>make</code>编译完成编译好的stunnel位于<code>src/stunnel</code>，根据发行版本配置启动。我偷懒，直接覆盖了原来安装的<code>/usr/bin/stunnel4</code>命令，其他的脚本还用<code>stunnel4</code>的，目前没有发现问题。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">sudo service  stunnel4  stop
</span><span class="line">sudo cp /usr/bin/stunnel4 /usr/bin/stunnel4.backup
</span><span class="line">sudo cp src/stunnel /usr/bin/stunnel4
</span><span class="line">sudo service  stunnel4  start
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[stunnel verify选项配置]]></title>
    <link href="http://xixitalk.github.io/blog/2016/10/18/stunnel-verify-config/"/>
    <updated>2016-10-18T09:12:59+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/10/18/stunnel-verify-config</id>
    <content type="html"><![CDATA[<p>verify配置认证方式，取值0 1 2 3 4。</p>

<p>0 - request and ignore peer cert<br />
1 - only validate peer cert if present<br />
2 - always require a valid peer cert<br />
3 - verify peer with locally installed cert<br />
4 - ignore CA chain and only verify peer cert  </p>

<!--more-->

<h2 id="stunnel5-verify">stunnel5 verify配置</h2>

<p>代码版本<code>stunnel 5.36</code>  文件<code>option.c</code>  函数<code>parse_service_option()</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class=""><span class="line">case CMD_EXEC:
</span><span class="line">    if(strcasecmp(opt, "verify"))
</span><span class="line">        break;
</span><span class="line">    {
</span><span class="line">        char *tmp_str;
</span><span class="line">        int tmp_int=(int)strtol(arg, &amp;tmp_str, 10);
</span><span class="line">        if(tmp_str==arg || *tmp_str || tmp_int&lt;0 || tmp_int&gt;4)
</span><span class="line">            return "Bad verify level";
</span><span class="line">        section-&gt;option.request_cert=1;
</span><span class="line">        section-&gt;option.require_cert=(tmp_int&gt;=2);
</span><span class="line">        section-&gt;option.verify_chain=(tmp_int&gt;=1 &amp;&amp; tmp_int&lt;=3);
</span><span class="line">        section-&gt;option.verify_peer=(tmp_int&gt;=3);
</span><span class="line">    }
</span><span class="line">    return NULL; /* OK */
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>verify</code>选项合法值为：0  1 2 3 4</p>

<table>
  <thead>
    <tr>
      <th>取值</th>
      <th>request_cert</th>
      <th>require_cert</th>
      <th>verify_chain</th>
      <th>verify_peer</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0</td>
      <td>√</td>
      <td>×</td>
      <td>×</td>
      <td>×</td>
    </tr>
    <tr>
      <td>1</td>
      <td>√</td>
      <td>×</td>
      <td>√</td>
      <td>×</td>
    </tr>
    <tr>
      <td>2</td>
      <td>√</td>
      <td>√</td>
      <td>√</td>
      <td>×</td>
    </tr>
    <tr>
      <td>3</td>
      <td>√</td>
      <td>√</td>
      <td>√</td>
      <td>√</td>
    </tr>
    <tr>
      <td>4</td>
      <td>√</td>
      <td>√</td>
      <td>×</td>
      <td>√</td>
    </tr>
  </tbody>
</table>

<p>conf配置文件里，<code>requireCert</code>可以修改require_cert，<code>verifyChain</code>可以修改<code>verify_chain</code>，<code>verifyPeer</code>可以修改<code>verify_peer</code>。</p>

<p>根据上表可得出，stunnel5里<code>verify = 3</code>最全面。</p>

<p>我自己服务器端是<code>verify = 3</code>，客户端用的是<code>verify = 4</code>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">verify = 4
</span><span class="line">verifyChain = no
</span><span class="line">verifyPeer = yes
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果是stunnel4，配置<code>verify = 3</code>即可，点对点连接推荐3。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[stunnel双向证书认证]]></title>
    <link href="http://xixitalk.github.io/blog/2016/10/13/Stunnel-With-Bilateral-Authentication/"/>
    <updated>2016-10-13T20:09:49+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/10/13/Stunnel-With-Bilateral-Authentication</id>
    <content type="html"><![CDATA[<p>stunnel 双向证书认证：<strong>防止没授权的客户端连接stunnel服务器，防止客户端连接假的服务器</strong>。</p>

<p>stunnel官方的<a href="https://www.stunnel.org/auth.html">说明</a>是：（客户端）检查服务器端证书是为了防止<strong>中间人攻击</strong>；（服务器端）检查客户端证书是为了严格控制客户端的访问。</p>

<ol>
  <li>Server authentication prevents <a href="https://en.wikipedia.org/wiki/Man-in-the-middle_attack">Man-In-The-Middle</a> (MITM) attacks on the encryption protocol.</li>
  <li>Client authentication allows for restricting access for individual clients (access control).</li>
</ol>

<!--more-->

<h2 id="stunnel">stunnel安全说明</h2>

<p>stunnel有四种证书检查配置，用<code>verify</code>选项控制。</p>

<ol>
  <li><strong>Do not Verify Certificates</strong>  不检查证书，<strong>默认值</strong><br />
If no verify argument is given, then stunnel will ignore any certificates offered and will allow all connections.</li>
  <li><strong>verify = 1</strong>  如果证书存在则检查证书<br />
Verify the certificate, if present.  </li>
  <li><strong>verify = 2</strong>  每个SSL连接要求检查证书<br />
Require and verify certificates<br />
Stunnel will require and verify certificates for every SSL connection. If no certificate or an invalid certificate is presented, then it will drop the connection.</li>
  <li><strong>verify = 3</strong>  依据本地安装的证书检查证书<br />
Require and verify certificates against locally installed certificates.</li>
  <li><strong>verify = 4</strong>  忽略CA chain，只验证peer certificate<br />
ignore CA chain and only verify peer certificate</li>
</ol>

<p>当<code>verify</code>配置2 3 4的时候，都会开启双向证书认证，自行选择。这里选择<code>verify = 3</code>。</p>

<p>stunnel服务端的<strong>防盗</strong>连安全机制是：在服务器<code>CAfile</code>里配置客户端的证书，并设置<code>verify = 3</code>，服务器端检查客户端证书，证书不在<code>CAfile</code>列表的客户端则会被断开连接。</p>

<p>同样，为了避免客户端连接到<strong>假的服务端</strong>，则需要配置<code>verify = 3</code>，并把服务端的<strong>公钥证书</strong>放在客户端侧的<code>CAfile</code>里。</p>

<h2 id="section">第一步 生成证书</h2>

<p>生成两个证书，一个服务端的<code>stunnel_s.pem</code>，一个客户端的<code>stunnel_c.pem</code>，有效期设置长一点，10000天，时间可以自行调整。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$openssl req -new -x509 -days 10000 -nodes -out stunnel_c.pem -keyout stunnel_c.pem
</span><span class="line">$openssl req -new -x509 -days 10000 -nodes -out stunnel_s.pem -keyout stunnel_s.pem
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="stunnelconf">第二步 服务器端stunnel.conf</h2>

<p>将证书拷贝到/etc/stunnel目录，设置权限400（文件拥有者只读，其他人不可查看）.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$sudo cp stunnel_s.pem /etc/stunnel/
</span><span class="line">$sudo cp stunnel_c.pem /etc/stunnel/
</span><span class="line">$sudo chmod 400 /etc/stunnel/*.pem
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>创建<code>stunnel.conf</code>文件，内容如下，拷贝到<code>/etc/stunnel/</code>目录。对外端口是8445，加密的是<a href="https://github.com/cyfdecyf/cow">cow HTTP proxy</a>的7777端口连接,根据情况自行修改。如果要调试打开<code>output</code>选项。cow是个HTTP代理，智能分流值得推荐。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class=""><span class="line">;fips=no
</span><span class="line">client = no
</span><span class="line">sslVersion=all
</span><span class="line">
</span><span class="line">chroot = /var/lib/stunnel4/
</span><span class="line">setuid = root
</span><span class="line">setgid = root
</span><span class="line">
</span><span class="line">pid = /stunnel4.open.pid
</span><span class="line">;output = /stunnel.open.log
</span><span class="line">cert = /etc/stunnel/stunnel_s.pem
</span><span class="line">key = /etc/stunnel/stunnel_s.pem
</span><span class="line">
</span><span class="line">[open]
</span><span class="line">accept = 8445
</span><span class="line">connect = 7777
</span><span class="line">
</span><span class="line">verify = 3
</span><span class="line">CAfile = /etc/stunnel/stunnel_c.pem
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>重启stunnel服务器</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$sudo service  stunnel4  restart
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="stunnelconf-1">第三步 客户端stunnel.conf</h2>

<p>我的客户端运行在windows系统，所以下面的配置是windows上stunnel验证的。其他系统配置类似，自行配置验证。</p>

<p>将<code>stunnel_c.pem</code>和<code>stunnel_s.pem</code>（存放在客户端的stunnel_s.pem最好删除证书里BEGIN PRIVATE KEY私钥部分，只保留BEGIN CERTIFICATE公钥部分）拷贝到<code>stunnel</code>安装目录，修改<code>stunnel.conf</code>文件，配置如下。<code>stunnel_ip</code>是服务器端stunnel的IP，端口是8084，浏览器配置127.0.0.1:8084 HTTP代理。如果要换其他端口自行修改。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
</pre></td><td class="code"><pre><code class=""><span class="line">fips=no
</span><span class="line">client = yes
</span><span class="line">sslVersion = all
</span><span class="line">socket = l:TCP_NODELAY=1
</span><span class="line">socket = r:TCP_NODELAY=1
</span><span class="line">socket = l:SO_LINGER=1:1
</span><span class="line">socket = r:SO_LINGER=1:1
</span><span class="line">
</span><span class="line">[fastssl]
</span><span class="line">accept = 127.0.0.1:8084
</span><span class="line">connect = stunnel_ip:8445
</span><span class="line">
</span><span class="line">verify = 3
</span><span class="line">CAfile = stunnel_s.pem
</span><span class="line">
</span><span class="line">cert = stunnel_c.pem
</span><span class="line">key = stunnel_c.pem
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果客户端连接<code>stunnel</code>服务器端需要HTTP代理（公司网络），<code>fastssl</code>部分这样配置</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">[fastssl]
</span><span class="line">accept = 127.0.0.1:8084
</span><span class="line">connect = proxy.company.com:80
</span><span class="line">protocol = connect
</span><span class="line">protocolHost = stunnel_ip:8445
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="pem">pem证书安全存放说明</h2>

<p>pem证书是文本文件，里面<code>BEGIN PRIVATE KEY</code>和<code>END PRIVATE KEY</code>是私钥部分，<code>BEGIN CERTIFICATE</code>和<code>END CERTIFICATE</code>是公钥部分。<code>cert</code>和<code>key</code>配置完整的pem，而<code>CAfile</code>里只包含对方的公钥部分即可，即服务端<code>CAfile</code>是客户端的公钥，客户端<code>CAfile</code>是服务端的公钥。遵循这样原则，客户端的私钥只放客户端，服务端的私钥只放服务端，而公钥是可以多处存放的。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class=""><span class="line">-----BEGIN PRIVATE KEY-----
</span><span class="line">MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQCo9WC13gg9WCRX
</span><span class="line">...
</span><span class="line">kPpWg2PAANRi5Bmr9ScvBISSYQ==
</span><span class="line">-----END PRIVATE KEY-----
</span><span class="line">-----BEGIN CERTIFICATE-----
</span><span class="line">MIID6TCCAtGgAwIBAgIJANBMqvP0YuV4MA0GCSqGSIb3DQEBBQUAMIGKMQswCQYD
</span><span class="line">...
</span><span class="line">o5tKoL9GcMhyjDoD9GCMfP6fY5DwPqhhqFTsPd47DzEdQ8amxPMn5kR/w/xk
</span><span class="line">-----END CERTIFICATE-----
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>多个公钥证书保存在一个<code>CAfile</code>里，这样排列存放。<a href="https://www.stunnel.org/howto.html">官方说明Where do I put all these certificates?</a>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">-----BEGIN CERTIFICATE-----
</span><span class="line">certificate #1 data here
</span><span class="line">-----END CERTIFICATE-----
</span><span class="line">-----BEGIN CERTIFICATE-----
</span><span class="line">certificate #2 data here
</span><span class="line">-----END CERTIFICATE-----
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-1">参考博客</h2>

<ol>
  <li><a href="http://www.hawu.me/operation/886">squid + stunnel » 跨越长城，科学上网！</a></li>
  <li><a href="http://briteming.blogspot.com/2013/03/stunnel.html">Using stunnel With Bilateral Authentication</a></li>
  <li><a href="https://sunmaiblog.wordpress.com/2010/09/21/stunnel%E7%9A%84%E8%AE%BE%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/">Stunnel的设置和使用</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress里用表格]]></title>
    <link href="http://xixitalk.github.io/blog/2016/10/12/table-in-octopress/"/>
    <updated>2016-10-12T10:53:20+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/10/12/table-in-octopress</id>
    <content type="html"><![CDATA[<p>octopress里怎么样用表格？octopress默认的表格border是0，看起来不整齐。这样修改可以显示border。</p>

<!--more-->

<h2 id="octopresscss">步骤一 覆盖octopress默认的CSS</h2>

<p>表格要显示border，需要这样修改。</p>

<p>参考他人博文：<a href="http://programus.github.io/blog/2012/03/07/add-table-data-css-for-octopress/">为Octopress追加数据表格的CSS</a></p>

<h2 id="markdown">步骤二 博文markdown格式</h2>

<p>博文报头增加<code>styles</code>选项：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">layout: post
</span><span class="line">title: "octopress里用表格"
</span><span class="line">date: 2016-10-12 10:53:20
</span><span class="line">comments: true
</span><span class="line">categories: octopress
</span><span class="line">styles: data-table
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>表格markdown这样写，我的octopress用的是<code>Kramdown</code>，其他markdown语法类似。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">|类型值|解释|
</span><span class="line">|----|----|
</span><span class="line">|0x0800 | 网际协议（IP）|
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>显示效果如下：</p>

<table>
  <thead>
    <tr>
      <th>类型值</th>
      <th>解释</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0x0800</td>
      <td>网际协议（IP）</td>
    </tr>
  </tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DNS协议学习笔记之DNS查询]]></title>
    <link href="http://xixitalk.github.io/blog/2016/10/10/dns-protocol/"/>
    <updated>2016-10-10T19:00:54+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/10/10/dns-protocol</id>
    <content type="html"><![CDATA[<p>DNS学习概要：  </p>

<ol>
  <li>DNS几个概念：A记录、AAAA记录、MX记录、CNAME记录、TEXT记录、URL转发、NS记录</li>
  <li>DNS查询报文</li>
  <li>DNS响应报文</li>
  <li>Google DNS over HTTPS</li>
</ol>

<!--more-->

<h2 id="dns">1.  DNS几个概念</h2>

<p>DNS几个概念，参看这两篇文章：</p>

<p><a href="https://www.ezloo.com/2011/04/a_mx_cname_txt_aaaa_ns.html">常用域名记录解释：A记录、MX记录、CNAME记录、TXT记录、AAAA记录、NS记录</a></p>

<p><a href="http://ju.outofmemory.cn/entry/187521">域名DNS解析相关概念 — A记录，MX记录，CNAME记录，url转发，ns记录</a></p>

<h2 id="dns-1">2. DNS查询报文</h2>

<h3 id="section">2.1 整体结构</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
</pre></td><td class="code"><pre><code class=""><span class="line">+---------------------+
</span><span class="line">|        Header       |
</span><span class="line">+---------------------+
</span><span class="line">|       Question      | the question for the name server
</span><span class="line">+---------------------+
</span><span class="line">|        Answer       | RRs answering the question
</span><span class="line">+---------------------+
</span><span class="line">|      Authority      | RRs pointing toward an authority
</span><span class="line">+---------------------+
</span><span class="line">|      Additional     | RRs holding additional information
</span><span class="line">+---------------------+
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img src="http://s6.51cto.com/wyfs02/M02/4D/A8/wKiom1RW2KaCvqHrAABEwMOH0AE633.jpg" alt="DNSrequest" /></p>

<h3 id="section-1">2.2 报文头</h3>

<p><img src="http://xixitalkgithubio.qiniudn.com/dnsheader.jpg" alt="DNSrequest2" /></p>

<table border="1">
  <tbody>
    <tr>
      <td>16位标识</td>
      <td>16位标志</td>
    </tr>
    <tr>
      <td>16位问题数</td>
      <td>16资源记录数</td>
    </tr>
    <tr>
      <td>16位授权资源记录数</td>
      <td>16位额外资源记录数</td>
    </tr>
  </tbody>
</table>

<p>整个DNS包头12个字节。  </p>

<p><strong>16位标志详解</strong></p>

<table border="1">
  <tbody>
    <tr>
      <td>1位QR</td>
      <td>4位Opcode</td>
      <td>1位AA</td>
      <td>1位TC</td>
      <td>1位RD</td>
      <td>1位RA</td>
      <td>3位清0</td>
      <td>4位RCode</td>
    </tr>
  </tbody>
</table>

<p>QR：0表示查询报文，1表示响应报文<br />
Opcode：通常值为0(标准查询)，其他值为1(反向查询)和2(服务器状态请求)。<br />
AA：表示授权回答(authoritative answer).<br />
TC：表示可截断的(truncated)<br />
RD：表示期望递归<br />
RA：表示可用递归，随后3bit必须为0<br />
RCode：返回码，通常为0(没有差错)和3(出错，该域名不存在)  </p>

<h3 id="question">2.3 查询问题(Question)结构</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class=""><span class="line">
</span><span class="line">                                    1  1  1  1  1  1
</span><span class="line">      0  1  2  3  4  5  6  7  8  9  0  1  2  3  4  5
</span><span class="line">    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
</span><span class="line">    |                                               |
</span><span class="line">    /                     QNAME                     /
</span><span class="line">    /                                               /
</span><span class="line">    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
</span><span class="line">    |                     QTYPE                     |
</span><span class="line">    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
</span><span class="line">    |                     QCLASS                    |
</span><span class="line">    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>QNAME结构：<strong>域名字符串按照<code>.</code>分割，按照字符长度+字符依次排列，00结尾</strong>。</p>

<p>比如www.google.com.hk，在抓包里QNAME的视图如下：</p>

<p><strong>03</strong> 77 77 77 <strong>06</strong> 67 6f 6f 67 6c 65 <strong>03</strong> 63 6f 6d <strong>02</strong> 68 6b 00</p>

<p>解读：03个字符（www），06个字符（google），03个字符（com），02个字符（hk），结尾是00</p>

<p>QType：长度16位，表示查询类型<br />
QClass:长度为16位，表示分类</p>

<h2 id="dns-2">2.4  一个典型的DNS查询包</h2>

<p>下面是<code>wireshark</code>抓取的一个DNS查询包：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">(前面是以太网包头+IP包头+UDP包头)6d 54 01 00 00 01
</span><span class="line">00 00 00 00 00 00 03 77    77 77 06 67 6f 6f 67 6c 
</span><span class="line">65 03 63 6f 6d 02 68 6b    00 00 01 00 01
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>6d 54</code>是标识，每次查询变化，DNS回应本次查询会用相同的标识<br />
<code>01 00</code>是标志，表示RD期望递归为1<br />
<code>00 01</code>是问题数，一个问题查询；其他三个查询记录数都是0<br />
接下来是QName，结构如上文说明<br />
倒数第二个<code>00 01</code>是QType，值是1<br />
最后一个<code>00 01</code>是QClass，值是是1  </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class=""><span class="line">enum QueryType //查询的资源记录类型。 
</span><span class="line">{ 
</span><span class="line">A=0x01, //指定计算机 IP 地址。 
</span><span class="line">NS=0x02, //指定用于命名区域的 DNS 名称服务器。 
</span><span class="line">MD=0x03, //指定邮件接收站（此类型已经过时了，使用MX代替） 
</span><span class="line">MF=0x04, //指定邮件中转站（此类型已经过时了，使用MX代替） 
</span><span class="line">CNAME=0x05, //指定用于别名的规范名称。 
</span><span class="line">SOA=0x06, //指定用于 DNS 区域的“起始授权机构”。 
</span><span class="line">MB=0x07, //指定邮箱域名。 
</span><span class="line">MG=0x08, //指定邮件组成员。 
</span><span class="line">MR=0x09, //指定邮件重命名域名。 
</span><span class="line">NULL=0x0A, //指定空的资源记录 
</span><span class="line">WKS=0x0B, //描述已知服务。 
</span><span class="line">PTR=0x0C, //如果查询是 IP 地址，则指定计算机名；否则指定指向其它信息的指针。 
</span><span class="line">HINFO=0x0D, //指定计算机 CPU 以及操作系统类型。 
</span><span class="line">MINFO=0x0E, //指定邮箱或邮件列表信息。 
</span><span class="line">MX=0x0F, //指定邮件交换器。 
</span><span class="line">TXT=0x10, //指定文本信息。 
</span><span class="line">UINFO=0x64, //指定用户信息。 
</span><span class="line">UID=0x65, //指定用户标识符。 
</span><span class="line">GID=0x66, //指定组名的组标识符。 
</span><span class="line">ANY=0xFF //指定所有数据类型。 
</span><span class="line">};
</span></code></pre></td></tr></table></div></figure></notextile></div>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">enum QueryClass //指定信息的协议组。 
</span><span class="line">{ 
</span><span class="line">IN=0x01, //指定 Internet 类别。 
</span><span class="line">CSNET=0x02, //指定 CSNET 类别。（已过时） 
</span><span class="line">CHAOS=0x03, //指定 Chaos 类别。 
</span><span class="line">HESIOD=0x04,//指定 MIT Athena Hesiod 类别。 
</span><span class="line">ANY=0xFF //指定任何以前列出的通配符。 
</span><span class="line">};
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-2">学习资料</h3>

<ol>
  <li>
    <p><a href="https://www.ietf.org/rfc/rfc1035.txt">rfc1035</a></p>
  </li>
  <li>
    <p><a href="http://www.zytrax.com/books/dns/ch15/">Chapter 15 DNS Messages</a></p>
  </li>
  <li>
    <p><a href="http://www.iprotocolsec.com/2012/01/13/%E4%BD%BF%E7%94%A8wireshark%E5%AD%A6%E4%B9%A0dns%E5%8D%8F%E8%AE%AE%E5%8F%8Adns%E6%AC%BA%E9%AA%97%E5%8E%9F%E7%90%86/">使用Wireshark学习DNS协议及DNS欺骗原理</a></p>
  </li>
  <li>
    <p><a href="http://www.cnblogs.com/topdog/archive/2011/11/15/2250185.html">DIY一个DNS查询器：了解DNS协议</a></p>
  </li>
  <li>
    <p><a href="https://www.ezloo.com/2011/04/a_mx_cname_txt_aaaa_ns.html">常用域名记录解释：A记录、MX记录、CNAME记录、TXT记录、AAAA记录、NS记录</a></p>
  </li>
  <li>
    <p><a href="http://ju.outofmemory.cn/entry/187521">域名DNS解析相关概念 — A记录，MX记录，CNAME记录，url转发，ns记录</a></p>
  </li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TCP/IP之IP包头部]]></title>
    <link href="http://xixitalk.github.io/blog/2016/10/10/ipheader-of-tcpip/"/>
    <updated>2016-10-10T17:03:51+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/10/10/ipheader-of-tcpip</id>
    <content type="html"><![CDATA[<p>TCP/IP之IP包头部</p>

<!--more-->

<p><img src="http://www.informit.com/content/images/chap3_0672323516/elementLinks/03table02.gif" alt="iphead" /></p>

<h3 id="ip">IP包头</h3>

<table border="1">
  <tbody>
    <tr>
      <td>4位版本</td>
      <td>4位首部长度</td>
      <td>8位服务类型</td>
      <td>16位总长度</td>
    </tr>
    <tr>
      <td>16位标识</td>
      <td>3位标志</td>
      <td>13位片偏移</td>
      <td> </td>
    </tr>
    <tr>
      <td>8位生存时间（TTL）</td>
      <td>8位协议</td>
      <td>16位首部校验和</td>
      <td> </td>
    </tr>
    <tr>
      <td>32位源IP地址</td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>32位目的IP地址</td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>可选字段</td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
    <tr>
      <td>不定长度数据</td>
      <td> </td>
      <td> </td>
      <td> </td>
    </tr>
  </tbody>
</table>

<p>4位版本：4表示IPv4<br />
4位首部长度：一般是5，标识首部20bytes<br />
<strong>注释： <code>08 00 45 00</code>是典型的IP包特征</strong>,08 00是以太网帧头中IP包类型标识<br />
8位服务类型：<br />
16位总长度：整个IP包长度（如果数据是UDP包，包含了UDP包的长度）<br />
8位协议：<strong>0x11是UDP，0x06是TCP</strong><br />
8位TTL：0x80（128）</p>

<h3 id="udp">UDP包头</h3>

<table border="1">
  <tbody>
    <tr>
      <td>16位源端口</td>
      <td>16位目的端口</td>
    </tr>
    <tr>
      <td>16位长度</td>
      <td>16位校验和</td>
    </tr>
  </tbody>
</table>

<p>整个UDP包头8个字节。<br />
16位长度：包括UDP头和数据包（比如上层DNS协议）</p>

<p>READ MORE<br />
<a href="http://www.informit.com/articles/article.aspx?p=28782&amp;seqNum=3">http://www.informit.com/articles/article.aspx?p=28782&amp;seqNum=3</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TCP/IP之以太网帧]]></title>
    <link href="http://xixitalk.github.io/blog/2016/10/10/Ethernet-of-tcpip/"/>
    <updated>2016-10-10T10:15:46+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/10/10/Ethernet-of-tcpip</id>
    <content type="html"><![CDATA[<h3 id="ethernet-iiv2">Ethernet II(以太网V2帧)</h3>

<!--more-->

<table border="1">
  <thead>
    <tr>
      <th>6字节</th>
      <th>6字节</th>
      <th>2字节</th>
      <th>46-1500字节</th>
      <th>4字节</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>目标MAC地址</td>
      <td>源MAC地址</td>
      <td>类型</td>
      <td>数据</td>
      <td>FCS</td>
    </tr>
  </tbody>
</table>

<p><strong>类型</strong>：  08 00 是IP包，08 06 是ARP包<br />
<strong>数据</strong>：  最常见的是IP包<br />
<strong>FCS</strong>：   Frame check sequence帧校验序列  </p>

<p>更多常见类型：  </p>

<table border="1">
  <thead>
    <tr>
      <th>类型值</th>
      <th>解释</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0x0800</td>
      <td>网际协议（IP）</td>
    </tr>
    <tr>
      <td>0x0806</td>
      <td>地址解析协议（ARP ： Address Resolution Protocol）</td>
    </tr>
    <tr>
      <td>0x0808</td>
      <td>帧中继 ARP （Frame Relay ARP） [RFC1701]</td>
    </tr>
    <tr>
      <td>0x814C</td>
      <td>简单网络管理协议（SNMP：Simple Network Management Protocol）</td>
    </tr>
    <tr>
      <td>0x86DD</td>
      <td>网际协议v6 （IPv6，Internet Protocol version 6）</td>
    </tr>
    <tr>
      <td>0x880B</td>
      <td>点对点协议（PPP：Point-to-Point Protocol）</td>
    </tr>
    <tr>
      <td>0x8847</td>
      <td>多协议标签交换（单播）（MPLS：Multi-Protocol Label Switching unicast）</td>
    </tr>
    <tr>
      <td>0x8848</td>
      <td>多协议标签交换（组播）（MPLS, Multi-Protocol Label Switching multicast）</td>
    </tr>
  </tbody>
</table>

<p>More Read  <a href="http://technow.blog.51cto.com/746816/320773">http://technow.blog.51cto.com/746816/320773</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DNS在HTTP网络交互流程中的位置]]></title>
    <link href="http://xixitalk.github.io/blog/2016/10/09/http-connection/"/>
    <updated>2016-10-09T08:55:37+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/10/09/http-connection</id>
    <content type="html"><![CDATA[<p>DNS在HTTP网络交互流程中的位置</p>

<!--more-->

<p>一个简单的HTTP请求流程（C语言版）</p>

<ol>
  <li>建立socket(socket())</li>
  <li>由域名查询到IP(getaddrinfo()或者gethostbyname())</li>
  <li>建立连接(connect())</li>
  <li>按照HTTP协议要求发送数据(send())</li>
  <li>监听socket等待接收数据(select())</li>
  <li>监听到数据后接收数据(recv())</li>
  <li>按照HTTP协议解析数据，再发送数据或者结束</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[柏林警方在难民中心枪杀了一名父亲，因为他企图攻击性侵他女儿的嫌疑犯]]></title>
    <link href="http://xixitalk.github.io/blog/2016/09/30/Berlin-Police-shoot-dead-father-at-refugee-centre-as-he-attacks-man-he-accused-of-abusing-daughter/"/>
    <updated>2016-09-30T09:10:49+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/09/30/Berlin-Police-shoot-dead-father-at-refugee-centre-as-he-attacks-man-he-accused-of-abusing-daughter</id>
    <content type="html"><![CDATA[<h3 id="berlin-police-shoot-dead-father-at-refugee-centre-as-he-attacks-man-he-accused-of-abusing-daughter">Berlin Police shoot dead father at refugee centre as he attacks man he accused of abusing daughter</h3>

<!--more-->

<h4 id="section">柏林警方在难民中心枪杀了一名女孩的父亲，因为他企图攻击性侵他女儿的嫌疑犯</h4>

<p>Police said that 29-year-old was shot attempting to attack alleged abuser with a knife.</p>

<p>警方声称29岁的死者被枪击原因是他企图用刀攻击嫌疑犯。</p>

<p>By Tom Porter<br />
September 28, 2016 12:54 BST</p>

<p><a href="http://www.ibtimes.co.uk/berlin-police-shoot-dead-father-refugee-centre-he-attacks-man-he-accused-abusing-daughter-1583767">http://www.ibtimes.co.uk/berlin-police-shoot-dead-father-refugee-centre-he-attacks-man-he-accused-abusing-daughter-1583767</a></p>

<p><img src="https://d.ibtimes.co.uk/en/full/1459826/berlin-police.jpg?w=736" alt="topic" /></p>

<p>Berlin police said the man suspected of shooting dead a 31-year-old British man is on the loose </p>

<p>【另一事件2016-09-21】柏林警方声称涉嫌枪杀一名31岁英国男子的男子已经被释放</p>

<p>Berlin police shot dead a father at a refugee home as he attempted to attack a man he accused of sexually abusing his daughter.</p>

<p>柏林警方枪杀了一名父亲，他企图攻击性侵他女儿的嫌疑犯。</p>

<p>Police arrested a 27-year-old man at a refugee centre in the Moabit area of the city on Tuesday evening accused of sexually abusing an 8-year-old girl.</p>

<p>星期二的晚上，在柏林Moabit街区的难民营，警方以性侵8岁小女孩的罪名拘捕了一名27岁男子。</p>

<p>The girl’s 29-year-old father reportedly charged at the handcuffed suspect with a knife as he was being arrested and put in a police car, and officers shot him, DPA reported. The father died hours later at a hospital.</p>

<p>在这名戴着手铐嫌疑犯正被塞进警车的时候，女孩29岁的父亲持小刀企图攻击嫌疑犯，随后警方对他开枪。据德新社报道，几个小时后这名父亲在一家医院死亡。</p>

<p>Witnesses said the father shouted “You will not survive this” as he charged at the alleged abuser.</p>

<p>目击者声称这名父亲在攻击嫌疑犯的时候大喊“你去死吧”。</p>

<p>An investigation into the shooting will be carried out by Berlin’s homicide division.</p>

<p>柏林警方凶杀专案组将会对本次枪击进行一系列调查。</p>

<p>Neither the names of the man arrested nor the man killed have been released by police. Unconfirmed reports claim the alleged abuser is Pakistani.</p>

<p>警方没有公开嫌疑犯和这名被杀男子的名字。未经证实报告声称这名性侵嫌疑犯是巴基斯坦人。</p>

<p>In July, a member of the left wing Die Linke party told German parliament that there has been 128 allegations of children being sexually abused at refugee centres in the country in the first quarter of 2016.</p>

<p>七月，一名左翼党派成员告诉德国议会：2016年第一季度，难民安置中心里已经发生了128起儿童被性侵事件。</p>

<p>A four-year-old child was allegedly raped by an Afghan man at a refugee centre in Hamburg in March, a court in Kiel recently heard.</p>

<p>基尔(Kiel)法院最近审理了一个案子，一个四岁的孩子在汉堡(Hamburg)难民中心被一个阿富汗男人强奸，事件发生在三月份。</p>

<p>In 2015, more than a million refugees and immigrants entered Germany, many fleeing war and poverty in the Middle East and Africa.</p>

<p>在2015年，有超过1百万中东和非洲人因战争或贫穷的原因以难民或移民身份进入德国。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[树莓派go语言编译器安装配置]]></title>
    <link href="http://xixitalk.github.io/blog/2016/09/17/raspbian-golang-install/"/>
    <updated>2016-09-17T19:42:13+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/09/17/raspbian-golang-install</id>
    <content type="html"><![CDATA[<p>关键词：树莓派 go语言编译器安装 raspbian golang install</p>

<!--more-->

<p>目前树莓派raspbian系统上go语言编译器版本还是1.3.3，太旧了，很多go语言写的软件都编译不成功。go语言从1.6版本官方直接提供ARM版本二进制文件，树莓派上直接可以使用。</p>

<h2 id="go">go编译器下载</h2>

<p>golang语言官方下载地址：<a href="https://golang.org/dl/">https://golang.org/dl/</a></p>

<p>目前（2016.09.17）最新版是1.7.1，选择其中的ARM版本。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">go1.7.1.linux-armv6l.tar.gz	Archive	Linux	ARMv6	66MB
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下载后在树莓派上用tar解压，比如解压路径为：<code>/home/pi/go/go1.7</code>里，<code>/home/pi/go/go1.7/go/bin/go</code>为编译器go命令。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line"> $ file /home/pi/go/go1.7/go/bin/go
</span><span class="line">/home/pi/go/go1.7/go/bin/go: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-armhf.so.3, not stripped
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>编译器不用安装到系统里了，直接使用即可，后续版本更新直接替换即可</strong>。</p>

<h2 id="go-1">go编译环境配置</h2>

<p>配置go编译器环境，<code>GOROOT</code>是go编译器安装目录，<code>GOPATH</code>是代码工程所在目录。重新设置<code>PATH</code>，把下载的编译器命令加到系统原来PATH之前，替换系统旧的go编译器。最好把系统代理配置上，不然从<code>github.com</code>下载代码会失败。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">export GOROOT=/home/pi/go/go1.7/go
</span><span class="line">export GOPATH=/home/pi/go/projects
</span><span class="line">export PATH=/home/pi/go/go1.7/go/bin:$PATH
</span><span class="line">export http_proxy=http://192.168.1.106:8118
</span><span class="line">export https_proxy=http://192.168.1.106:8118
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section">编译一个软件试试</h2>

<p>从<code>github.com</code>自动下载代码编译一个工程试试，比如<a href="http://github.com/ayanamist/gdns-go">gdns-go</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">go get github.com/ayanamist/gdns-go
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>看看<code>/home/pi/go/projects</code>目录是不是有<code>bin</code> <code>pkg</code> <code>src</code>三个目录，<code>bin</code>目录就有编译好的<code>gdns-go</code>程序了。</p>

<h2 id="gdns-go">gdns-go推荐说明</h2>

<p>搜索关键词：gdns-go DNS dnsmasq  DNSCrypt DNS污染</p>

<p><code>gdns-go</code>是一个基于<a href="https://developers.google.com/speed/public-dns/docs/dns-over-https">Google DNS over HTTPS API</a>的DNS服务器程序，因为Google的API接口被墙，所以支持通过<a href="https://github.com/shadowsocks">shadowsocks</a>连接和socks5代理连接，带<code>Cache</code>缓存，解析速度有保障。是一个比较完美的解决DNS污染的DNS服务器。go语言实现，方便windows、linux环境和各种ARM+linux路由器设备树莓派编译运行。</p>

<p><code>config.json</code>例子配置如下，然后执行<code>sudo ./gdns-go &gt; /dev/null 2&gt;&amp;1 &amp;</code>后台运行即可(53端口需要root权限账号运行)。我已经用<code>gdns-go</code>取代<code>dnsmasq</code> + <code>DNSCrypt</code>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">{
</span><span class="line">  "listen": "192.168.1.104:53",
</span><span class="line">  "proxy": "ss://aes-128-cfb:x123456x@17.x.x.x:15879",
</span><span class="line">  "mapping": {
</span><span class="line">    "taobao.com": "223.5.5.5"
</span><span class="line">  }
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[造了一个轮子：sleep命令]]></title>
    <link href="http://xixitalk.github.io/blog/2016/09/15/sleep-linux-command/"/>
    <updated>2016-09-15T08:03:35+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/09/15/sleep-linux-command</id>
    <content type="html"><![CDATA[<p>我们一个嵌入式平台，系统是<code>uClinux</code>，不支持动态库，只能用静态库，每个程序都包含了所有调用的函数代码，包括C库的。客户一个产品压力测试时偶现系统内存不够，期望当天我们能协助他们解决，内存优化有很多方向，不好入手啊。</p>

<!--more-->

<p>通过分析内存不够的现场，系统内存还有一些，但是碎片化了，物理连续的256K的内存块都没有了。同时发现客户有两个常驻的sh进程，两个sh程序都用<code>sleep</code>做等待循环。<code>linux</code>命令用的是<code>busybox</code>，任何一个命令都是运行<code>busybox</code>。运行一个<code>busybox</code>要耗费512K内存，<code>sleep</code>命令也是这样。</p>

<p>两个<code>sleep</code>本身就占用1M，把sh脚本分拆，在代码里<code>sleep</code>，就会去掉这个内存占用，是个可以优化出一点内存的方法。但是经过沟通客户不愿意修改sh脚本，从项目考虑我也理解。后来<strong>我脑洞大开了一下，觉得<code>sleep</code>命令最后就是简单调用<code>sleep</code>函数，为何不重新实现一个，不用<code>busybox</code>的那个呢。重新实现了一个sleep命令，替换busybox里的sleep命令，这样就能减少<code>sleep</code>的内存占用了</strong>。</p>

<p>于是写了一个最简单的只有20行的<code>sleep</code>命令，不支持<code>s</code> <code>m</code> <code>h</code> <code>d</code> 参数，不支持浮点数，静态编译出来只有10K，加上默认4K栈空间，运行时候16K内存就足够了，这样就能节省出这1M内存，经过客户测试发现问题解决了。好啊，中秋节不用加班了。（备注：南京受台风影响，中秋节下了一整天雨，这篇博客就是中秋节写的。）</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#include &lt;stdio.h&gt;
</span><span class="line">#include &lt;stdlib.h&gt;
</span><span class="line">#include &lt;unistd.h&gt;
</span><span class="line">
</span><span class="line">int main(int argc, char *argv[])
</span><span class="line">{
</span><span class="line">    unsigned long int timelen = 0;
</span><span class="line">    int i = 0;
</span><span class="line">
</span><span class="line">    if(1 == argc)
</span><span class="line">        return -1;
</span><span class="line">
</span><span class="line">    for(i = 1; i &lt; argc; i++)
</span><span class="line">        timelen += strtoul(argv[i], NULL, 10);
</span><span class="line">
</span><span class="line">    if(timelen &gt; 0)
</span><span class="line">        sleep(timelen);
</span><span class="line">
</span><span class="line">    return 0;
</span><span class="line">}
</span><span class="line">
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>后来想想还是实现一个功能比较全的吧，代码如下。和标准linux sleep命令功能唯一不同的是：没有实现浮点数支持。</p>

<script src="https://gist.github.com/xixitalk/354a2628bbd21214be5340b0cac0ac52.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[产品中多个不明可执行程序dvrHelper]]></title>
    <link href="http://xixitalk.github.io/blog/2016/08/30/virus-dvrHelper/"/>
    <updated>2016-08-30T16:48:47+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/08/30/virus-dvrHelper</id>
    <content type="html"><![CDATA[<p>一个数据类产品，测试报告描述：FTP上传下载加浏览器看视频，一个小时内必死机。</p>

<p>死机现场初步分析：死机直接原因是系统内存耗尽，但是发现进程里多了三个奇怪的进程，进程名都像是随机字符串，两个死机现场都有，并且进程名还随机的不一样。</p>

<!--more-->

<p>有人去分析内存问题，我来分析三个奇怪的进程。</p>

<p>这三个进程父进程是Init，执行的命令是<code>dvrHelper</code>，开始我怀疑版本自带的程序，查看了版本编译后的文件系统，没有这个文件，在整个版本代码里搜索这个字符串，没有找到任何踪迹。这时候有人告诉我版本的根文件系统里多了<code>dvrHelper</code>文件，重烧版本是没有这个文件的。手动运行这个文件，提示</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">listening tun0
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>运行结束后，进程列表里就多了三个奇怪的进程。父进程是Init，这是linux守护进程惯用的机制。我把dvrHelper上传到<code>https://www.virustotal.com</code>在线扫描，55个杀毒软件，有2个提示异常。通常<code>VPN</code>会使用<code>tun0</code>和<code>tup0</code>这样虚拟网口，这应该是一个网络包监控/分析/过滤程序。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class=""><span class="line">SHA256:	c483618671766847fc75ea79fdc201df2e4a93f501dc98ec9c6f283fb1d4336c
</span><span class="line">File name:	dvrHelper
</span><span class="line">Detection ratio:	2 / 55
</span><span class="line">Analysis date:	2016-08-29 08:51:11 UTC ( 22 hours, 56 minutes ago )
</span><span class="line">
</span><span class="line">AVG	Linux/Fgt.CA	20160829
</span><span class="line">ESET-NOD32	a variant of Linux/Gafgyt.SE	20160829
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>通过<code>file</code>命令查看文件属性，说是ARM格式的ELF文件。反汇编没有任何调试信息，汇编上看不出功能。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">$ file dvrHelper
</span><span class="line">dvrHelper: ELF 32-bit LSB executable, ARM, version 1 (SYSV), statically linked, stripped
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这时候基本确认，<code>dvrHelper</code>文件是个木马程序了。引入这个木马的路径分析只有两个，一个通过<code>adb push</code>，一个就是<code>telnet</code>。</p>

<p>先禁用了<code>adb</code>功能，发现问题还是出现了。<br />
<strong>同时禁用<code>adb</code>和<code>telnetd</code>，问题不出现了</strong>。</p>

<p>现在问题聚焦在<code>telnetd</code>服务上。</p>

<p><code>telnet</code>是一个远程协议，<code>telnetd</code>是一个实现<code>telnet协议</code>的服务程序。</p>

<p>PC上用<code>wireshark</code>抓包，没有抓到PC上应用程序登录<code>telnetd</code>的证据。后来突然想到<code>pppoe</code>功能可能会分配一个公网IP，<code>ifconfig</code>一看，果然电信分配了一个公网IP。用手机登录这个公网IP的<code>telnet</code>，也果然登录到这个产品里了。这样就怀疑产品是通过公网IP登录产品的<code>telnetd</code>服务，把木马上传到产品里了。</p>

<p>同时在内核<code>fs/open.c</code>里加代码，如果打开<code>dvrHelper</code>文件就panic死机。死机显示在通过busybox执行<code>cp /bin/echo dvrHelper</code>，顺着父进程一直往上找，找到了<code>telnetd</code>进程。这样也再次排除了<code>adb</code>的嫌疑。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class=""><span class="line">long do_sys_open(int dfd, const char __user *filename, int flags, umode_t mode)
</span><span class="line">{
</span><span class="line">        if(strstr(filename,"dvrHelper"))
</span><span class="line">            panic("[testcode] dvrHelper found\n");
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>tenetd</code>是包含在<code>busybox</code>工具包里，在<code>telnetd.c</code>里增加代码，用<code>getpeername</code>获取登录客户的IP是<code>0.0.0.0</code>，不知道为什么。按说<code>accept</code>后调用<code>getpeername</code>没有问题啊。我对网络不熟，如果有人知道请赐教。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class=""><span class="line">struct sockaddr_in sa;
</span><span class="line">int len = sizeof(sa);
</span><span class="line">FILE *fp;
</span><span class="line">
</span><span class="line">/*something*/
</span><span class="line">fd = accept(master_fd, NULL, NULL);
</span><span class="line">if (fd &lt; 0)
</span><span class="line">	goto again;
</span><span class="line">close_on_exec_on(fd);
</span><span class="line">
</span><span class="line">if(!getpeername(fd, (struct sockaddr *)&amp;sa, &amp;len))
</span><span class="line">{
</span><span class="line">  fp = fopen("/cache/login.log","ab+");
</span><span class="line">  fprintf(fp,"[testcode] accept  from %s \n", inet_ntoa(sa.sin_addr));
</span><span class="line">  fclose(fp);
</span><span class="line">}
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这时候只好祭出了<code>tcpdump</code>工具，在产品内部运行<code>tcpdump</code>，只抓取公网网口的23端口数据包。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">tcpdump -i ppp0 port 23
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><strong>十几分钟的时间，就抓到了来自台湾 泰国 巴西 印度的<code>telnet</code>登录，再一会根目录就多了<code>dvrHelper</code>文件。</strong></p>

<p>修改意见：<br />
1. 发货版本禁用<code>telnetd</code>服务
2. 开发版本用<code>iptables</code>设置禁止<code>ppp0</code>网口的23端口访问，不用admin：admin这样简单的账号密码，<code>telnetd</code>可以不用默认23端口，换成4589这样端口号</p>

<p>PS：因特网真是太危险了</p>

]]></content>
  </entry>
  
</feed>
