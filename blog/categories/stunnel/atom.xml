<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: stunnel | xixitalk's snippet]]></title>
  <link href="http://xixitalk.github.io/blog/categories/stunnel/atom.xml" rel="self"/>
  <link href="http://xixitalk.github.io/"/>
  <updated>2016-10-13T12:42:34+00:00</updated>
  <id>http://xixitalk.github.io/</id>
  <author>
    <name><![CDATA[xixitalk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[stunnel双向证书验证]]></title>
    <link href="http://xixitalk.github.io/blog/2016/10/13/Stunnel-With-Bilateral-Authentication/"/>
    <updated>2016-10-13T20:09:49+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/10/13/Stunnel-With-Bilateral-Authentication</id>
    <content type="html"><![CDATA[<p>stunnel 双向证书验证，防止有人偷偷连接stunnel服务器。</p>

<!--more-->

<h2 id="section">第一步 生成证书</h2>

<p>生成两个证书，一个服务端的<code>stunnel_s.pem</code>，一个客户端的<code>stunnel_c.pem</code>，有效期设置长一点1000天。</p>

<p><code>
$openssl req -new -x509 -days 10000 -nodes -out stunnel_c.pem -keyout stunnel_c.pem
$openssl req -new -x509 -days 10000 -nodes -out stunnel_s.pem -keyout stunnel_s.pem
</code></p>

<h2 id="stunnelconf">第二步 服务器端stunnel.conf</h2>

<p>将证书拷贝到/etc/stunnel目录，设置权限400.</p>

<p><code>
$sudo cp stunnel_s.pem /etc/stunnel/
$sudo cp stunnel_c.pem /etc/stunnel/
$sudo chmod 400 /etc/stunnel/*.pem
</code></p>

<p>创建<code>stunnel.conf</code>文件，内容如下，拷贝到<code>/etc/stunnel/</code>目录。对外端口是8445，加密的是<a href="https://github.com/cyfdecyf/cow">cow</a>的7777端口,根据情况自行修改。</p>

<p>```
;fips=no
client = no
sslVersion=all</p>

<p>chroot = /var/lib/stunnel4/
setuid = root
setgid = root</p>

<p>pid = /stunnel4.open.pid
;output = /stunnel.open.log
cert = /etc/stunnel/stunnel_s.pem
key = /etc/stunnel/stunnel_s.pem</p>

<p>[open]
accept = 8445
connect = 7777</p>

<p>verify=2
CAfile = /etc/stunnel/stunnel_c.pem
```</p>

<p>服务器端重启</p>

<p><code>
$sudo service  stunnel4  restart
</code></p>

<h2 id="stunnelconf-1">第三步 客户端stunnel.conf</h2>

<p>我的客户端运行在windows系统，所以下面的配置是windows上stunnel验证的。其他系统自行验证。</p>

<p>将<code>stunnel_c.pem</code>和<code>stunnel_s.pem</code>（删除证书里BEGIN PRIVATE KEY私钥部分，只保留BEGIN CERTIFICATE公钥部分）拷贝到<code>stunnel</code>安装目录，修改<code>stunnel.conf</code>文件，配置如下。<code>stunnel_ip</code>是服务器端stunnel的IP，自行修改。</p>

<p>```
fips=no
client = yes
sslVersion = all
socket = l:TCP_NODELAY=1
socket = r:TCP_NODELAY=1
socket = l:SO_LINGER=1:1
socket = r:SO_LINGER=1:1</p>

<p>[fastssl]
accept = 127.0.0.1:8084
connect = stunnel_ip:8445</p>

<p>verify = 2
CAfile = stunnel_s.pem</p>

<p>cert = stunnel_c.pem
key = stunnel_c.pem
```</p>

<h2 id="stunnel">stunnel安全说明</h2>

<p>发现stunnel当服务器配置<code>verify = 2</code>时，如果客户端配置<code>verify = 0</code>，客户端并不检查服务器端的证书，就算<code>CAfile</code>配置错误的服务器证书还是可以正常连接。而服务器检查客户端的证书。</p>

<p>所以，stunnel的防盗连安全机制是：在服务器<code>CAfile</code>里配置客户端的证书，并设置<code>verify = 2</code>，服务器端检查客户端证书不在列表则断开连接。</p>

<h2 id="section-1">参考博客</h2>

<ol>
  <li><a href="http://www.hawu.me/operation/886">squid + stunnel » 跨越长城，科学上网！</a></li>
  <li><a href="http://briteming.blogspot.com/2013/03/stunnel.html">Using stunnel With Bilateral Authentication</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[stunnel原理]]></title>
    <link href="http://xixitalk.github.io/blog/2013/04/08/stunnel-principle/"/>
    <updated>2013-04-08T16:31:00+00:00</updated>
    <id>http://xixitalk.github.io/blog/2013/04/08/stunnel-principle</id>
    <content type="html"><![CDATA[<p>搜索关键词：stunnel proxy socks5 HTTP HTTPS 代理</p>

<p>stunnel原理如图：</p>

<!--more-->

<p><a href="/static/images/2013/04/stunnel.png"><img src="/static/images/2013/04/stunnel.png" alt="stunnel原理图" /></a></p>

<p>具体教程可参见下面篇博文：<br />
<a href="https://w3.owind.com/pub/ssledge/">搭建SSLedge HTTPS代理</a><br />
<a href="https://wido.me/sunteya/setup-a-socks-proxy-server-pass-by-secure-firewall/">通过 stunnel 搭建安全高性能的 sockts 代理服务器</a><br />
<a href="http://www.ibm.com/developerworks/cn/security/s-stun/">使用 Stunnel 加密 如何在 SSL 内加密任意 TCP 连接</a>(提醒这篇文章发表于2001年，现在看来可能部分配置不适用)  </p>

]]></content>
  </entry>
  
</feed>
