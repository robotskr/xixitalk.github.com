<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: raspberrypi | xixitalk's snippet]]></title>
  <link href="http://xixitalk.github.io/blog/categories/raspberrypi/atom.xml" rel="self"/>
  <link href="http://xixitalk.github.io/"/>
  <updated>2017-09-19T07:37:19+00:00</updated>
  <id>http://xixitalk.github.io/</id>
  <author>
    <name><![CDATA[xixitalk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[树莓派go语言编译器安装配置]]></title>
    <link href="http://xixitalk.github.io/blog/2016/09/17/raspbian-golang-install/"/>
    <updated>2016-09-17T19:42:13+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/09/17/raspbian-golang-install</id>
    <content type="html"><![CDATA[<p>关键词：树莓派 go语言编译器安装 raspbian golang install</p>

<!--more-->

<p>目前树莓派raspbian系统上go语言编译器版本还是1.3.3，太旧了，很多go语言写的软件都编译不成功。go语言从1.6版本官方直接提供ARM版本二进制文件，树莓派上直接可以使用。</p>

<h2 id="go">go编译器下载</h2>

<p>golang语言官方下载地址：<a href="https://golang.org/dl/">https://golang.org/dl/</a></p>

<p>目前（2016.09.17）最新版是1.7.1，选择其中的ARM版本。</p>

<p><code>
go1.7.1.linux-armv6l.tar.gz	Archive	Linux	ARMv6	66MB
</code></p>

<p>下载后在树莓派上用tar解压，比如解压路径为：<code>/home/pi/go/go1.7</code>里，<code>/home/pi/go/go1.7/go/bin/go</code>为编译器go命令。</p>

<p><code>
 $ file /home/pi/go/go1.7/go/bin/go
/home/pi/go/go1.7/go/bin/go: ELF 32-bit LSB executable, ARM, EABI5 version 1 (SYSV), dynamically linked, interpreter /lib/ld-linux-armhf.so.3, not stripped
</code></p>

<p><strong>编译器不用安装到系统里了，直接使用即可，后续版本更新直接替换即可</strong>。</p>

<h2 id="go-1">go编译环境配置</h2>

<p>配置go编译器环境，<code>GOROOT</code>是go编译器安装目录，<code>GOPATH</code>是代码工程所在目录。重新设置<code>PATH</code>，把下载的编译器命令加到系统原来PATH之前，替换系统旧的go编译器。最好把系统代理配置上，不然从<code>github.com</code>下载代码会失败。</p>

<p><code>
export GOROOT=/home/pi/go/go1.7/go
export GOPATH=/home/pi/go/projects
export PATH=/home/pi/go/go1.7/go/bin:$PATH
export http_proxy=http://192.168.1.106:8118
export https_proxy=http://192.168.1.106:8118
</code></p>

<h2 id="section">编译一个软件试试</h2>

<p>从<code>github.com</code>自动下载代码编译一个工程试试，比如<a href="http://github.com/ayanamist/gdns-go">gdns-go</a></p>

<p><code>
go get github.com/ayanamist/gdns-go
</code></p>

<p>看看<code>/home/pi/go/projects</code>目录是不是有<code>bin</code> <code>pkg</code> <code>src</code>三个目录，<code>bin</code>目录就有编译好的<code>gdns-go</code>程序了。</p>

<h2 id="gdns-go">gdns-go推荐说明</h2>

<p>搜索关键词：gdns-go DNS dnsmasq  DNSCrypt DNS污染</p>

<p><code>gdns-go</code>是一个基于<a href="https://developers.google.com/speed/public-dns/docs/dns-over-https">Google DNS over HTTPS API</a>的DNS服务器程序，因为Google的API接口被墙，所以支持通过<a href="https://github.com/shadowsocks">shadowsocks</a>连接和socks5代理连接，带<code>Cache</code>缓存，解析速度有保障。是一个比较完美的解决DNS污染的DNS服务器。go语言实现，方便windows、linux环境和各种ARM+linux路由器设备树莓派编译运行。</p>

<p><code>config.json</code>例子配置如下，然后执行<code>sudo ./gdns-go &gt; /dev/null 2&gt;&amp;1 &amp;</code>后台运行即可(53端口需要root权限账号运行)。我已经用<code>gdns-go</code>取代<code>dnsmasq</code> + <code>DNSCrypt</code>。</p>

<p><code>
{
  "listen": "192.168.1.104:53",
  "proxy": "ss://aes-128-cfb:x123456x@17.x.x.x:15879",
  "mapping": {
    "taobao.com": "223.5.5.5"
  }
}
</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install owncloud 9.0.2 on RaspberryPi]]></title>
    <link href="http://xixitalk.github.io/blog/2016/04/22/Install-owncloud-on-raspberrypi/"/>
    <updated>2016-04-22T23:16:41+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/04/22/Install-owncloud-on-raspberrypi</id>
    <content type="html"><![CDATA[<p>Install owncloud 9.0.2 on RaspberryPi<br />
在树莓派上安装owncloud 9.0.2</p>

<!--more-->

<h1 id="section">系统环境</h1>

<p>我用的硬件是树莓派3，系统是<code>raspbian JESSIE LITE</code>，下载地址<a href="https://www.raspberrypi.org/downloads/raspbian/">https://www.raspberrypi.org/downloads/raspbian/</a>，我是新系统全新安装<code>owncloud</code>，仅供参考。</p>

<p>首先配置系统扩展到整个SD卡，配置后重启系统才生效。</p>

<p><code>
sudo raspi-config 
</code></p>

<p>更新<code>apt</code>软件仓库，升级系统到最新，可以修改<code>/etc/apt/source.list</code>使用aliyun的源。</p>

<p><code>
sudo apt-get update
sudo apt-get dist-upgrade
</code> </p>

<h1 id="owncloud">owncloud官方安装文档</h1>

<p>这里是<code>owncloud 9.0</code>版本的官方安装文档,供参阅：<a href="https://doc.owncloud.org/server/9.0/admin_manual/installation/source_installation.html">https://doc.owncloud.org/server/9.0/admin_manual/installation/source_installation.html</a></p>

<h1 id="section-1">安装过程</h1>

<h2 id="apache2-phpmariadb">第一步：安装apache2 php和mariadb数据库</h2>

<p>安装<code>owncloud</code>所需要的<code>apache</code> <code>php</code> 和<code>mariadb</code>数据库软件，安装过程会提示配置<code>mariadb</code>数据库的<code>root</code>账号密码，牢记这个密码。</p>

<p><code>
sudo apt-get install apache2 mariadb-server libapache2-mod-php5 php5-gd php5-json php5-mysql php5-curl php5-intl php5-mcrypt php5-imagick
</code></p>

<h2 id="owncloud-1">第二步：下载owncloud软件包</h2>

<p>下载<code>owncloud</code>软件包，并解压，即发现<code>owncloud</code>目录。</p>

<p><code>
wget https://download.owncloud.org/community/owncloud-9.0.1.tar.bz2
tar -xjf owncloud-9.0.1.tar.bz2
</code></p>

<h2 id="owncloudapache2">第三步：为owncloud配置apache2</h2>

<p>拷贝<code>owncloud</code>代码到<code>apache2</code>的网站根目录</p>

<p><code>
sudo cp -r owncloud /var/www
</code></p>

<p>为<code>apache2</code>添加<code>owncloud.conf</code>配置文件</p>

<p><code>
sudo vi /etc/apache2/sites-available/owncloud.conf
</code></p>

<p>```
Alias /owncloud “/var/www/owncloud/”</p>

<p>&lt;Directory /var/www/owncloud/&gt;
  Options +FollowSymlinks
  AllowOverride All</p>

<ifmodule mod_dav.c="">
  Dav off
 </ifmodule>

<p>SetEnv HOME /var/www/owncloud
 SetEnv HTTP_HOME /var/www/owncloud</p>

<p>&lt;/Directory&gt;
```</p>

<p>将<code>sites-enabled</code>里<code>owncloud.conf</code>软连接到<code>sites-available</code>的<code>owncloud.conf</code></p>

<p><code>
sudo ln -s /etc/apache2/sites-available/owncloud.conf /etc/apache2/sites-enabled/owncloud.conf
</code></p>

<p>打开<code>apache2</code>里<code>owncloud</code>所需的模块</p>

<p><code>
sudo a2enmod rewrite
sudo a2enmod headers
sudo a2enmod env
sudo a2enmod dir
sudo a2enmod mime
</code></p>

<p>重启<code>apache2</code>服务</p>

<p><code>
sudo service apache2 restart
</code></p>

<h2 id="occowncloud">第四步：用occ安装owncloud剩余部分</h2>

<p>这一部分可以参考官方文档<a href="https://doc.owncloud.org/server/9.0/admin_manual/installation/command_line_installation.html">https://doc.owncloud.org/server/9.0/admin_manual/installation/command_line_installation.html</a></p>

<p>改变<code>/var/www/owncloud</code>目录的用户属性</p>

<p><code>
sudo chown -R www-data:www-data /var/www/owncloud/
</code></p>

<p>用<code>occ</code>安装<code>owncloud</code>，<code>database-pass</code>即为数据库的<code>root</code>用户密码，<code>admin</code>和<code>password</code>是<code>owncloud</code>的用户帐号和密码，牢记。</p>

<p><code>
$ cd /var/www/owncloud/
</code></p>

<p><code>
$ sudo -u www-data php occ  maintenance:install --database
"mysql" --database-name "owncloud"  --database-user "root" --database-pass
"password" --admin-user "admin" --admin-pass "password"
</code></p>

<p>会提示以下信息</p>

<p><code>
ownCloud is not installed - only a limited number of commands are available
ownCloud was successfully installed
</code></p>

<p>添加IP或者域名到<code>config.php</code>的可信域<code>trusted_domains</code>。</p>

<p><code>
sudo vi /var/www/owncloud/config/config.php
</code></p>

<p>类似下面格式</p>

<p><code>
  'trusted_domains' =&gt;
  array (
    0 =&gt; 'localhost',
    1 =&gt; '192.168.1.104',
    2 =&gt; '192.168.1.106',
  ),
</code> </p>

<h2 id="owncloud-2">第五步：浏览器打开owncloud</h2>

<p>用浏览器访问owncloud的地址，Enjoy owncloud!</p>

<p><code>
http://RaspberryPi-IP/owncloud
</code></p>

<h1 id="todo">TODO</h1>

<ol>
  <li>没有配置SSL</li>
  <li>安全的配置目录权限</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[树莓派nf_conntrack错误]]></title>
    <link href="http://xixitalk.github.io/blog/2013/06/25/nf_conntrack-error/"/>
    <updated>2013-06-25T08:57:52+00:00</updated>
    <id>http://xixitalk.github.io/blog/2013/06/25/nf_conntrack-error</id>
    <content type="html"><![CDATA[<p>最近我的树莓派出现大量的重启，特别是看电影+下bt的时候，并且<a href="http://www.thekelleys.org.uk/dnsmasq/doc.html">Dnsmasq</a>也经常退出，在<code>/var/log/syslog</code>和<code>/var/log/messages</code>出现大量的nf_conntrack错误。</p>

<p><code>
 raspbmc kernel: nf_conntrack: table full, dropping packet
</code></p>

<!--more-->

<p>先试试下面这种方法能不能解决问题，默认<code>nf_conntrack_max</code>是7xxx，树莓派的内存不大，暂时设置<code>20000</code></p>

<p><code>
sudo sysctl -w "net.netfilter.nf_conntrack_max=20000"
sudo sysctl -w "net.netfilter.nf_conntrack_tcp_timeout_established=600"
</code></p>

<p>参考：</p>

<p><a href="http://www.wendangz.com/idc/linux/967.html">http://www.wendangz.com/idc/linux/967.html</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Raspberry Pi上安装Go lang并编译cow proxy]]></title>
    <link href="http://xixitalk.github.io/blog/2013/06/14/go-lang-for-raspberrypi/"/>
    <updated>2013-06-14T11:48:41+00:00</updated>
    <id>http://xixitalk.github.io/blog/2013/06/14/go-lang-for-raspberrypi</id>
    <content type="html"><![CDATA[<h3 id="go">安装go语言</h3>

<p>选用非官方的二进制软件包，详细：<a href="http://dave.cheney.net/unofficial-arm-tarballs">http://dave.cheney.net/unofficial-arm-tarballs</a></p>

<p>ARMv6 (Raspberry Pi, etc)<br />
<a href="http://dave.cheney.net/paste/go1.1.linux-arm~armv6-1.tar.gz">go1.1.linux-arm~armv6-1.tar.gz</a><br />
sha1sum 2a76c9799aa5410090234edfda36ef69f5f99a42</p>

<!--more-->

<p>解压到/home/pi/go目录即可</p>

<h3 id="go-1">设置go语言编译环境变量</h3>

<p><code>
export GOROOT=/home/pi/go/go
export GOPATH=/home/pi/go/mygo
export PATH=$PATH:$GOROOT/bin
</code></p>

<p>如果系统没有安装mercurial软件包，则需要用<code>apt-get</code>安装mercurial软件，cow proxy需要用到go语言的crypto package，<code>go get</code>会调用<code>hg</code>命令来获得。</p>

<p><code>
sudo apt-get install mercurial
</code></p>

<h3 id="cow-proxy">编译cow proxy</h3>

<p><a href="https://github.com/cyfdecyf/cow">cow proxy</a>是<a href="http://twitter.com/cyfdecyf">@cyfdecyf</a>用go语言编写的一个自动代理，代码开源，支持二级socks代理。<br />
用下面的命令编译</p>

<p><code>
go get github.com/cyfdecyf/cow
</code></p>

<p>如果上面的命令出现go build出错<code>signal: killed</code>，再单独build</p>

<p><code>
go build github.com/cyfdecyf/cow
</code></p>

<p>编译好的cow二进制文件位于/home/pi/go/mygo目录下。</p>

<p>我已经编译好的二进制在<a href="https://github.com/xixitalk/build/tree/master/cow">https://github.com/xixitalk/build/tree/master/cow</a></p>

<h3 id="section">下一次更新代码再编译</h3>

<p><code>
go get -u  github.com/cyfdecyf/cow
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用浏览器发布博客到octopress]]></title>
    <link href="http://xixitalk.github.io/blog/2013/05/31/octopress-post-from-raspberrypi/"/>
    <updated>2013-05-31T19:57:25+00:00</updated>
    <id>http://xixitalk.github.io/blog/2013/05/31/octopress-post-from-raspberrypi</id>
    <content type="html"><![CDATA[<h3 id="section">目标</h3>
<p>用网页发布到octopress，这样手机、iPad、办公环境都可以通过浏览器发octopress博文了。</p>

<h3 id="section-1">设想</h3>
<p>浏览器网页编写，保存在GAE上，raspberry pi上用shell定时检查抓取，下载到octopress的_posts目录下，调用<code>rake</code>进行发布，调用<code>git push</code>上传markdown源文件到github。</p>

<!--more-->

<h3 id="section-2">硬件环境</h3>
<p>需要一个全天运行的电脑（我的是树莓派），用于每10分钟进行检查是否服务器(GAE)上新的博文，并rake生成html格式的博文上传到github。</p>

<h3 id="section-3">软件环境</h3>
<p>树莓派上安装octopress所需的所有工具，生成一个不要密码的SSH密钥，把公钥上传到github上，这样<code>rake deploy</code>就不会提示输入密码了。</p>

<h3 id="gae">GAE网页设计</h3>

<h4 id="shell">面向shell的接口</h4>
<p><code>/md/getnewpost?action=flag</code>  用于判断GAE上是否有新博文，1表示有新博文，0表示没有新博文 <br />
<code>/md/getnewpost?action=cleanflag</code> 将GAE上博文标志1变成0，用于<code>rake deploy</code>成功后使用  </p>

<p><code>/md/getnewpost?action=getfilename</code> 获得新博文的文件名<br />
<code>/md/getnewpost?action=getfilemd5</code> 获得新博文的md5，用于检验下载的完整性<br />
<code>/md/getnewpost?action=getfilecontent</code> 获得新博文的内容  </p>

<h4 id="section-4">面向用户的接口</h4>
<p><code>/md/getnewpost?action=new</code> 用户要新建博文，浏览器访问该地址<br />
<code>/md/getnewpost?action=edit</code> 用户要重新编辑博文，浏览器访问该地址  </p>

<h4 id="section-5">用户不需要关心的接口</h4>
<p><code>/md/getnewpost?action=save</code> edit之后保存按钮执行本接口<br />
<code>/md/getnewpost?action=publish</code> save后publish按钮执行本接口，将博文标志变成1  </p>

<h3 id="shell-1">shell检查</h3>

<ol>
  <li>先用<code>action=flag</code>获得博文标志。如果是0，GAE上无新博文，直接退出；如果是1，继续。  </li>
  <li>获得新博文的文件名、md5、文件内容，用本地命令md5sum计算新博文的md5，与<code>action=getfilemd5</code>获得的md5进行比较。如果不一致，抓取博文出错退出；如果一致，抓取博文正确。</li>
  <li>将新博文拷贝到octopress到source/_posts目录下，调用<code>rake generate &amp;&amp; rake deploy</code>进行HTML博文生成和发布，调用<code>git push</code>将markdown博文上传到github服务器。</li>
  <li>调用<code>action=cleanflag</code>将GAE博文标志变成0，表示GAE上新博文已经成功发布。</li>
</ol>

<p>可能是<code>rake generate</code>和<code>rake deploy</code>时间比较长，cron 10分钟检查不好使，发现没有效果，最后用后台shell <code>while</code> 循环检查，执行一次后 <code>sleep</code> 600秒这样才正常。</p>

<p>updated from my iPad with Safari</p>
]]></content>
  </entry>
  
</feed>
