<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: pthread | xixitalk's snippet]]></title>
  <link href="http://xixitalk.github.io/blog/categories/pthread/atom.xml" rel="self"/>
  <link href="http://xixitalk.github.io/"/>
  <updated>2016-10-18T01:46:37+00:00</updated>
  <id>http://xixitalk.github.io/</id>
  <author>
    <name><![CDATA[xixitalk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[pthread和errno]]></title>
    <link href="http://xixitalk.github.io/blog/2016/08/01/pthread-errno/"/>
    <updated>2016-08-01T19:10:02+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/08/01/pthread-errno</id>
    <content type="html"><![CDATA[<p>pthread和errno：pthread函数在出错的时候不会设置errno，而是直接返回错误值。</p>

<!--more-->

<blockquote>
  <p><strong>pthread_create() won’t ever set errno</strong>.  pthread function returns zero
on success, and an error code on error.  So the value you are seeing
in errno is either the result of an error in some previous other
system call, or errno is just starting out at EINTR and never getting
changed (this has happened to me).</p>
</blockquote>

<p>```
 #define handle_error_en(en, msg) \
               do { errno = en; perror(msg); exit(EXIT_FAILURE); } while (0)</p>

<p>s = pthread_create(&amp;tinfo[tnum].thread_id, &amp;attr,
                      &amp;thread_start, &amp;tinfo[tnum]);
if (s != 0)
    handle_error_en(s, “pthread_create”);
```</p>

<h4 id="section">参考资料</h4>

<p><a href="http://man7.org/linux/man-pages/man3/pthread_create.3.html">http://man7.org/linux/man-pages/man3/pthread_create.3.html</a><br />
<a href="https://sourceware.org/ml/libc-alpha/2000-10/msg00153.html">https://sourceware.org/ml/libc-alpha/2000-10/msg00153.html</a><br />
<a href="http://www.oschina.net/question/234345_40365">http://www.oschina.net/question/234345_40365</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pthread退出时自动回收资源]]></title>
    <link href="http://xixitalk.github.io/blog/2016/07/18/pthread-autoclean-when-exiting/"/>
    <updated>2016-07-18T08:49:16+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/07/18/pthread-autoclean-when-exiting</id>
    <content type="html"><![CDATA[<p>pthread线程创建后默认属性是joinable，线程函数执行完资源不会自动回收线程资源，需要主进程<code>pthread_join</code>进行回收，否则就会造成不必要的内存占用，频繁创建退出线程可能会造成系统内存耗尽。除了<code>pthread_join</code>用这种办法更好些。</p>

<!--more-->

<p>线程函数加上<code>pthread_detach(pthread_self())</code>的话，线程状态改变成<code>unjoinable</code>，这样线程函数尾部直接 pthread_exit线程就会自动退出。</p>

<p>```
static void  thread_fn( void *args)
{
	pthread_detach(pthread_self());</p>

<pre><code>while(flag)
{
	/*do something*/
}

pthread_exit(NULL); } ```
</code></pre>

<h2 id="section">参考文章</h2>

<p><a href="http://blog.csdn.net/trinea/article/details/5191165">http://blog.csdn.net/trinea/article/details/5191165</a></p>

<p><a href="http://www.lxway.net/499814656.html">http://www.lxway.net/499814656.html</a></p>

]]></content>
  </entry>
  
</feed>
