<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: bugfix | xixitalk's snippet]]></title>
  <link href="http://xixitalk.github.io/blog/categories/bugfix/atom.xml" rel="self"/>
  <link href="http://xixitalk.github.io/"/>
  <updated>2016-10-18T08:37:40+00:00</updated>
  <id>http://xixitalk.github.io/</id>
  <author>
    <name><![CDATA[xixitalk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[函数栈破坏检查]]></title>
    <link href="http://xixitalk.github.io/blog/2016/07/09/func-stack-check/"/>
    <updated>2016-07-09T14:49:35+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/07/09/func-stack-check</id>
    <content type="html"><![CDATA[<p>函数栈破坏检查 平台 ARM linux，编译器GCC</p>

<!--more-->

<p>产品部分音频功能是台湾某家公司提供的，开源了部分代码，二次开发实现一个功能发现偶现程序段错误，根据coredump显示最后异常函数是一个类似printf的打印函数，而这个打印函数基本可以肯定是没有问题的，并且出现了多次。程序这样跑飞其中一个可能的原因就是函数栈遭到破坏，函数执行完弹栈返回函数调用的下条指令时候出错了。所以写了一个函数栈检查函数。</p>

<p>```
funcA()
{
	funcB()
	RETURN_EXP
}</p>

<p>funcB()
{
	funcC();
	funcD();
	funcE();
}
```</p>

<p>原理：函数调用过程是进函数funcB把调用funcB地方的下一条指令地址RETURN_EXP_ADDR（RETURN_EXP语句的地址）压栈，funcB函数执行完弹栈从栈把RETURN_EXP_ADDR赋值给PC就完成了函数返回，funcB函数在返回之前栈里的返回地址RETURN_EXP_ADDR一直在栈里，而funcB函数里本身可能会再调用多个其他函数，这些函数funcC、funcD和funcE都不应该擦写函数funcB的返回地址RETURN_EXP_ADDR。进funcB开始，就把RETURN_EXP_ADDR地址从栈里找出来，funcC、funcD和funcE执行完了都检查一下栈里的RETURN_EXP_ADDR是否被破坏。</p>

<script src="https://gist.github.com/xixitalk/633303a13cd3711b4efc94881e1cc0da.js"></script>

<p>问题很快定位，问题原因是其中一个函数接收消息的时候，recv函数输入可接收数据size比buffer实际size大，大小都是宏值，不容易发觉，这个buffer恰好是局部变量（栈空间），从而recv长消息的时候把栈破坏了。</p>

<p>特别提醒：如果定位的testFunc函数里局部变量过大，可能需要调整STACK_FIND_SIZE大小。定位平台是ARM linux，编译是GCC，其他平台和编译器以此类推。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[malloc封装检查越界]]></title>
    <link href="http://xixitalk.github.io/blog/2016/07/09/malloc-wrap/"/>
    <updated>2016-07-09T13:32:35+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/07/09/malloc-wrap</id>
    <content type="html"><![CDATA[<p>malloc封装检查越界</p>

<!--more-->

<p>上周出差，出现一例死机现场在libc的malloc函数里，分析malloc管理内存被擦写了，想来应该是用户使用malloc越界了。但是问题难复现，程序运行大于6小时出现，共抓取了3个现场，死机位置类似，可以定位某个线程的while循环。所以现场封装了一个malloc函数用于检测内存是否越界。代码如下</p>

<script src="https://gist.github.com/xixitalk/d9364ee670f09f0365fd45466a773ba4.js"></script>

<p><code>
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
|  size | BEGIN_MAGIC |      USER      BUFFER      | END_MAGIC |
+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
</code></p>

<p>每次内存申请多申请12个字节，前4个字节保存用户真实size，第4-8个字节保存魔术字，最后4个字节也保存魔术字，起始地址+8是用户可见的空间。</p>

<p>很快就定位某个函数使用缓存越界了。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UINT32引起的死循环]]></title>
    <link href="http://xixitalk.github.io/blog/2016/07/09/dead-loop-UINT32/"/>
    <updated>2016-07-09T10:02:35+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/07/09/dead-loop-UINT32</id>
    <content type="html"><![CDATA[<p>UINT32 引起的死循环</p>

<!--more-->

<p>上周出差定位一个死循环。一个函数进行一个信号量的初始化，每次进行一次业务都要调用这个函数初始化，这个函数作用是保障初始化后信号量初始化值为<code>SEM_INIT_NUM</code>，但因为<code>UINT32</code>的关系出现死循环了。代码如下：</p>

<script src="https://gist.github.com/xixitalk/5c176a78a8743465061ef15ab5f9a248.js"></script>

<p>出现问题的时候，<code>semCount</code>为4，而宏<code>SEM_INIT_NUM</code>为3，造成<code>Count = SEM_INIT_NUM - semCount</code>为<code>-1</code>了，但因为<code>Count</code>是<code>UINT32</code>，从而变成<code>0xFFFFFFFF</code>，一个极大值，造成for循环执行长时间不退出。修改方法是将<code>Count</code>的<code>UINT32</code>改成<code>SINT32</code>。这是一个非常低级的代码错误。</p>

<p>其实更简单的是删除信号量，重新创建信号量，这样代码会容易读的多。</p>

<p><code>
DeleteSemaphore(ptxSem);
ptxSem = CreateSemaphore(SEM_INIT_NUM);
</code></p>
]]></content>
  </entry>
  
</feed>
