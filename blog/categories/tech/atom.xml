<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tech | xixitalk's snippet]]></title>
  <link href="http://xixitalk.github.io/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://xixitalk.github.io/"/>
  <updated>2017-11-13T02:24:23+00:00</updated>
  <id>http://xixitalk.github.io/</id>
  <author>
    <name><![CDATA[xixitalk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[内网穿透：从家里连接办公室电脑]]></title>
    <link href="http://xixitalk.github.io/blog/2017/11/13/link-office-from-home-via-frp/"/>
    <updated>2017-11-13T09:11:13+00:00</updated>
    <id>http://xixitalk.github.io/blog/2017/11/13/link-office-from-home-via-frp</id>
    <content type="html"><![CDATA[<p>环境说明: 我没有公网IP的VPS，但是家里路由器是有公网IP的，可以借路由器的公网IP进行内网穿透。</p>

<h4 id="section">环境</h4>

<p>家里一台树莓派3（IP 192.168.1.104）接在路由器下，路由器IP是192.168.1.1  公网IP假定是180.109.114.114。路由器上配置端口映射，把14827和14828都映射到树莓派3的192.168.1.104上。</p>

<p>内网穿透使用<a href="https://github.com/fatedier/frp/blob/master/README_zh.md">frp</a>软件。frp编译好的二进制下载地址<a href="https://github.com/fatedier/frp/releases">https://github.com/fatedier/frp/releases</a>，树莓派使用<code>frp_0.13.0_linux_arm.tar.gz</code>。</p>

<!--more-->

<h4 id="frp-server">运行frp server</h4>

<p>树莓派运行frp server，配置如下：</p>

<p>```
[common]
bind_port = 14828</p>

<p>```</p>

<p>配置如上，保存为config.ini，运行执行<code>nohup ./frps -c ./conf.ini -L ./log.txt &amp;</code></p>

<h4 id="frp-client">运行frp client</h4>

<p>办公室运行frp client，配置如下：</p>

<p>```
[common]
server_addr = 180.109.114.114
server_port = 14828
http_proxy = http://proxy.example.com.cn:80</p>

<p>[rdp]
type = tcp
local_ip = 127.0.0.1
local_port = 3389
remote_port = 14827
use_encryption = true
use_compression = true</p>

<p>```</p>

<p>配置说明：180.109.114.114为路由器公网IP，14828是frp服务的侦听端口；http_proxy是办公室访问因特网要通过HTTP代理，如果不需要直接去掉；3389是windows远程桌面的端口，其他服务换对应端口。</p>

<p>配置如上，保存为frpc.ini，运行<code>frpc.exe -c frpc.ini</code>。</p>

<h4 id="section-1">测试连接</h4>

<p>在家里Windows电脑上打开远程桌面登录框，IP输入：192.168.1.104:14827，或者192.168.1.1:14827登录。</p>

<p>或者在外边因特网环境，IP输入：180.109.114.114:14827登录。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[getaddrinfo 返回Name or service not known错误]]></title>
    <link href="http://xixitalk.github.io/blog/2017/09/19/getaddrinfo-error/"/>
    <updated>2017-09-19T14:23:57+00:00</updated>
    <id>http://xixitalk.github.io/blog/2017/09/19/getaddrinfo-error</id>
    <content type="html"><![CDATA[<p>关键词：glibc  getaddrinfo</p>

<p>同事反馈说程序调用<code>getaddrinfo</code>函数出错（arm linux平台），glibc是2.20，我想glibc不会这么弱，这么标准的函数都有问题。</p>

<!--more-->

<p>从网上找了一个getaddrinfo的<a href="http://beej.us/guide/bgnet/examples/showip.c">实例代码</a>，用arm交叉编译链编译后，执行，确实getaddrinfo出错，提示信息<code>Name or service not known</code>。</p>

<p><code>
arm-linux-gcc showip.c -o getaddrinfo
./getaddrinfo baidu.com
getaddrinfo: Name or service not known
</code></p>

<p>从strace分析getaddrinfo执行流程，和PC linux上对比，发现resolv.conf流程后，缺少socket流程。</p>

<p>下面是出问题的strace流程。</p>

<p><code>
$./strace ./getaddrinfo baidu.com
execve("./getaddrinfo", ["./getaddrinfo", "baidu.com"], [/* 12 vars */]) = 0
brk(0)                                  = 0x11000
uname({sysname="Linux", nodename="root", ...}) = 0
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb6fa8000
access("/etc/ld.so.preload", R_OK)      = -1 ENOENT (No such file or directory)
open("/usr/local/lib/tls/v6l/vfp/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
stat64("/usr/local/lib/tls/v6l/vfp", 0xbed8c4c0) = -1 ENOENT (No such file or directory)
open("/usr/local/lib/tls/v6l/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
stat64("/usr/local/lib/tls/v6l", 0xbed8c4c0) = -1 ENOENT (No such file or directory)
open("/usr/local/lib/tls/vfp/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
stat64("/usr/local/lib/tls/vfp", 0xbed8c4c0) = -1 ENOENT (No such file or directory)
open("/usr/local/lib/tls/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
stat64("/usr/local/lib/tls", 0xbed8c4c0) = -1 ENOENT (No such file or directory)
open("/usr/local/lib/v6l/vfp/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
stat64("/usr/local/lib/v6l/vfp", 0xbed8c4c0) = -1 ENOENT (No such file or directory)
open("/usr/local/lib/v6l/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
stat64("/usr/local/lib/v6l", 0xbed8c4c0) = -1 ENOENT (No such file or directory)
open("/usr/local/lib/vfp/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
stat64("/usr/local/lib/vfp", 0xbed8c4c0) = -1 ENOENT (No such file or directory)
open("/usr/local/lib/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
stat64("/usr/local/lib", {st_mode=S_IFDIR|0775, st_size=0, ...}) = 0
open("/usr/lib/tls/v6l/vfp/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
stat64("/usr/lib/tls/v6l/vfp", 0xbed8c4c0) = -1 ENOENT (No such file or directory)
open("/usr/lib/tls/v6l/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
stat64("/usr/lib/tls/v6l", 0xbed8c4c0)  = -1 ENOENT (No such file or directory)
open("/usr/lib/tls/vfp/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
stat64("/usr/lib/tls/vfp", 0xbed8c4c0)  = -1 ENOENT (No such file or directory)
open("/usr/lib/tls/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
stat64("/usr/lib/tls", 0xbed8c4c0)      = -1 ENOENT (No such file or directory)
open("/usr/lib/v6l/vfp/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
stat64("/usr/lib/v6l/vfp", 0xbed8c4c0)  = -1 ENOENT (No such file or directory)
open("/usr/lib/v6l/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
stat64("/usr/lib/v6l", 0xbed8c4c0)      = -1 ENOENT (No such file or directory)
open("/usr/lib/vfp/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
stat64("/usr/lib/vfp", 0xbed8c4c0)      = -1 ENOENT (No such file or directory)
open("/usr/lib/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
stat64("/usr/lib", {st_mode=S_IFDIR|0775, st_size=0, ...}) = 0
open("/lib/tls/v6l/vfp/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
stat64("/lib/tls/v6l/vfp", 0xbed8c4c0)  = -1 ENOENT (No such file or directory)
open("/lib/tls/v6l/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
stat64("/lib/tls/v6l", 0xbed8c4c0)      = -1 ENOENT (No such file or directory)
open("/lib/tls/vfp/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
stat64("/lib/tls/vfp", 0xbed8c4c0)      = -1 ENOENT (No such file or directory)
open("/lib/tls/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
stat64("/lib/tls", 0xbed8c4c0)          = -1 ENOENT (No such file or directory)
open("/lib/v6l/vfp/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
stat64("/lib/v6l/vfp", 0xbed8c4c0)      = -1 ENOENT (No such file or directory)
open("/lib/v6l/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
stat64("/lib/v6l", 0xbed8c4c0)          = -1 ENOENT (No such file or directory)
open("/lib/vfp/libc.so.6", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
stat64("/lib/vfp", 0xbed8c4c0)          = -1 ENOENT (No such file or directory)
open("/lib/libc.so.6", O_RDONLY|O_CLOEXEC) = 3
read(3, "\177ELF\1\1\1\0\0\0\0\0\0\0\0\0\3\0(\0\1\0\0\0\\f\1\0004\0\0\0"..., 512) = 512
fstat64(3, {st_mode=S_IFREG|0775, st_size=1218140, ...}) = 0
mmap2(NULL, 1254784, PROT_READ|PROT_EXEC, MAP_PRIVATE|MAP_DENYWRITE, 3, 0) = 0xb6e50000
mprotect(0xb6f75000, 32768, PROT_NONE)  = 0
mmap2(0xb6f7d000, 12288, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_DENYWRITE, 3, 0x125000) = 0xb6f7d000
mmap2(0xb6f80000, 9600, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_FIXED|MAP_ANONYMOUS, -1, 0) = 0xb6f80000
close(3)                                = 0
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb6fa7000
set_tls(0xb6fa74c0, 0xb6fa7ba8, 0xb6faa050, 0xb6fa74c0, 0xb6faa050) = 0
mprotect(0xb6f7d000, 8192, PROT_READ)   = 0
mprotect(0xb6fa9000, 4096, PROT_READ)   = 0
socket(PF_LOCAL, SOCK_STREAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0) = 3
connect(3, {sa_family=AF_LOCAL, sun_path="/var/run/nscd/socket"}, 110) = -1 ENOENT (No such file or directory)
close(3)                                = 0
socket(PF_LOCAL, SOCK_STREAM|SOCK_CLOEXEC|SOCK_NONBLOCK, 0) = 3
connect(3, {sa_family=AF_LOCAL, sun_path="/var/run/nscd/socket"}, 110) = -1 ENOENT (No such file or directory)
close(3)                                = 0
brk(0)                                  = 0x11000
brk(0x32000)                            = 0x32000
open("/etc/nsswitch.conf", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
open("/etc/host.conf", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
getpid()                                = 93
open("/etc/resolv.conf", O_RDONLY|O_CLOEXEC) = 3
fstat64(3, {st_mode=S_IFREG|0644, st_size=104, ...}) = 0
mmap2(NULL, 4096, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -1, 0) = 0xb6fa6000
read(3, "nameserver 10.30.1.9\nsearch baidu."..., 4096) = 104
read(3, "", 4096)                       = 0
close(3)                                = 0
munmap(0xb6fa6000, 4096)                = 0
open("/usr/local/lib/libnss_dns.so.2", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
open("/usr/lib/libnss_dns.so.2", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
open("/lib/libnss_dns.so.2", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
open("/etc/ld.so.cache", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
open("/lib/libnss_dns.so.2", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
open("/usr/lib/libnss_dns.so.2", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
open("/usr/local/lib/libnss_files.so.2", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
open("/usr/lib/libnss_files.so.2", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
open("/lib/libnss_files.so.2", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
open("/lib/libnss_files.so.2", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
open("/usr/lib/libnss_files.so.2", O_RDONLY|O_CLOEXEC) = -1 ENOENT (No such file or directory)
write(2, "getaddrinfo: Name or service not"..., 39getaddrinfo: Name or service not known
) = 39
exit_group(2)                           = ?
+++ exited with 2 +++
</code></p>

<p>PC linux正常的getaddrinfo strace流程，resolv.conf有<code>sendmmsg</code>和<code>recvfrom</code>流程，正是这个流程获取到了IP。</p>

<p>```
open(“/etc/resolv.conf”, O_RDONLY|O_CLOEXEC) = 3
fstat(3, {st_mode=S_IFREG|0644, st_size=224, …}) = 0
read(3, “# Dynamic resolv.conf(5) file fo”…, 4096) = 224
read(3, “”, 4096)                       = 0
close(3)                                = 0
uname({sysname=”Linux”, nodename=”root”, …}) = 0
socket(PF_INET, SOCK_DGRAM|SOCK_NONBLOCK, IPPROTO_IP) = 3
connect(3, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr(“10.41.213.131”)}, 16) = 0
poll([{fd=3, events=POLLOUT}], 1, 0)    = 1 ([{fd=3, revents=POLLOUT}])
sendmmsg(3, {msg_name(0)=NULL, msg_iov(1)=[{“\261\235\1\0\0\1\0\0\0\0\0\0\5baidu\3com\0\0\1\0\1”, 31}], msg_controllen=0, msg_flags=0}, 31}, {msg_name(0)=NULL, msg_iov(1)=[{“\321\3\1\0\0\1\0\0\0\0\0\0\5baidu\3com\0\0\34\0\1”, 31}], msg_controllen=0, msg_flags=0}, 31}, 2, MSG_NOSIGNAL) = 2
poll([{fd=3, events=POLLIN}], 1, 5000)  = 1 ([{fd=3, revents=POLLIN}])
ioctl(3, FIONREAD, [47])                = 0
recvfrom(3, “\261\235\201\200\0\1\0\1\0\0\0\0\5baidu\3com\0\0\1\0\1\300”…, 2048, 0, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr(“10.41.213.131”)}, [16]) = 47
poll([{fd=3, events=POLLIN}], 1, 4998)  = 1 ([{fd=3, revents=POLLIN}])
ioctl(3, FIONREAD, [81])                = 0
recvfrom(3, “\321\3\201\200\0\1\0\0\0\1\0\0\5baidu\3com\0\0\34\0\1\300”…, 65536, 0, {sa_family=AF_INET, sin_port=htons(53), sin_addr=inet_addr(“10.41.213.131”)}, [16]) = 81
close(3)                                = 0
fstat(1, {st_mode=S_IFREG|0664, st_size=7635, …}) = 0
write(1, “IP addresses for baidu.com:\n”…, 52IP addresses for baidu.com:</p>

<p>IPv4: 10.30.1.61
) = 52
exit_group(0)                           = ?
+++ exited with 0 +++
```</p>

<p>对比两个strace的打印，发现出问题的平台提示<code>libresolv.so.2</code>和<code>libnss_dns.so.2</code>找不到，这两个库看起来和域名解析有关，从编译链里找到这两个库<code>libnss_dns-2.20.so</code>和<code>libresolv-2.20.so</code>，放到开发板<code>/lib</code>目录，并创建好软连接。再次运行<code> ./getaddrinfo baidu.com</code>发现正常了。看来就是<code>getaddrinfo</code>依赖<code>libnss_dns</code>和<code>libresolv</code>两个动态库。坑爹的是<code>ldd getaddrinfo</code>并发现不了getaddrinfo程序依赖这两个动态库。</p>

<p><code>/lib</code>新增库如下</p>

<p><code>
libnss_dns-2.20.so
libnss_dns.so.2 -&gt; libnss_dns-2.20.so
libresolv-2.20.so
libresolv.so.2 -&gt; libresolv-2.20.so
</code></p>

<p>[root@~ ]# ./getaddrinfo baidu.com
IP addresses for baidu.com
IPv4: 10.30.1.19</p>

<h3 id="section">参考资料</h3>

<p><a href="http://beej-zhtw.netdpi.net/05-system-call-or-bust/5-1-getaddrinfo-start">http://beej-zhtw.netdpi.net/05-system-call-or-bust/5-1-getaddrinfo-start</a></p>

<p><a href="http://beej.us/guide/bgnet/examples/showip.c">http://beej.us/guide/bgnet/examples/showip.c</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[树莓派3上编译haproxy]]></title>
    <link href="http://xixitalk.github.io/blog/2017/09/03/compile-haproxy-on-raspberry3/"/>
    <updated>2017-09-03T06:01:08+00:00</updated>
    <id>http://xixitalk.github.io/blog/2017/09/03/compile-haproxy-on-raspberry3</id>
    <content type="html"><![CDATA[<p>最近发现树莓派上haproxy有点问题，Google Play下载有些不正常。所以想更新编译haproxy。raspbian软件仓库的haproxy的版本比较低，所以直接下载haproxy源代码编译。更新过程记录下来。</p>

<!--more-->

<p>为了配置省事，建议先安装raspbian软件仓库里的haproxy，然后编译好的haproxy的直接覆盖，这样启动配置不用费心配置。</p>

<p>1、下载源代码并解压</p>

<p><code>
wget http://www.haproxy.org/download/1.7/src/haproxy-1.7.9.tar.gz
tar xzvf haproxy-1.7.9.tar.gz
cd haproxy-1.7.9/
</code></p>

<p>2、编译</p>

<p>haproxy不能直接make，需要带配置参数。先查看已经安装的haproxy的编译参数。</p>

<p><code>
haproxy -vv OPTIONS = USE_GETADDRINFO=1
</code></p>

<p>执行上面的命令会得到类似以下信息。</p>

<p><code>
Build options :
  TARGET  = linux2628
  CPU     = generic
  CC      = gcc
  CFLAGS  = -O2 -g -fno-strict-aliasing -Wdeclaration-after-statement
  OPTIONS =
</code></p>

<p>make编译</p>

<p><code>
make  TARGET=linux2628   CPU=generic  CFLAGS="-O2 -g -fno-strict-aliasing -Wdeclaration-after-statement"
</code></p>

<p>正常编译完，在haproxy-1.7.9目录下就会生成haproxy可执行文件。用<code>./haproxy -vv</code>查看编译好的haproxy版本号。</p>

<p>3、替换系统里的haproxy</p>

<p><code>
$which haproxy
/usr/sbin/haproxy
$sudo service haproxy stop
$sudo cp ./haproxy /usr/sbin/haproxy
$sudo service haproxy start
</code></p>

<p>4、haproxy负载平衡shadowsocks配置参考</p>

<p><code>14826</code>是haproxy提供的端口，<code>12222</code>是haproxy的状态web端口，可以用浏览器访问http://IP:12222查看haproxy状态。<code>j1.vps.com</code>等是多个SS server端。SS local访问haproxy的<code>14826</code>端口，IP为haproxy的侦听IP，SS local其他配置和直接访问SS server是一样的。</p>

<p>```
global
ulimit-n 51200
defaults
log global
mode tcp
option dontlognull
balance roundrobin
option persist
timeout connect 10000
timeout client 150000
timeout server 150000</p>

<p>listen stats
bind *:12222
mode http
stats enable
stats uri /
stats refresh 10s</p>

<p>retries 1
option redispatch
frontend ss-in
bind *:14826
default_backend ss-out
backend ss-out
server j1 j1.vps.com:29777 maxconn 20480 weight 1
server j2 j2.vps.com:29777 maxconn 20480 weight 100
server us0 us0.vps.com:29777 maxconn 20480 weight 1 backup
server us1 us1.vps.com:29777 maxconn 20480 weight 1 backup
server us2 us2.vps.com:29777 maxconn 20480 weight 1 backup
server us3 us3.vps.com:29777 maxconn 20480 weight 1 backup
```</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[华硕路由器外接硬盘格式化成什么文件系统最好]]></title>
    <link href="http://xixitalk.github.io/blog/2016/11/12/How-to-Format-Usb-Drive-for-asus-router/"/>
    <updated>2016-11-12T15:33:41+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/11/12/How-to-Format-Usb-Drive-for-asus-router</id>
    <content type="html"><![CDATA[<p>关键词：华硕 AC66U AC68U 外接硬盘 文件系统 EXT4 EXT3 NTFS FAT32</p>

<p>我有一台华硕AC66U，外接了一块2.5吋移动硬盘。不知道格式化成什么格式最好？硬盘本来是EXT4格式的，插上发现没有自动挂载，搜索发现，AC66U建议用<strong>EXT3</strong>格式，而AC68U建议用<strong>EXT4</strong>格式。果然格式成EXT3后，插上AC66U后<strong>自动挂载</strong>了。其他华硕机器未验证。</p>

<!--more-->

<blockquote>
  <p>For usb hdd Mipsel devices is EXT3 (RT-N16, RT-N66U, RT-AC66U and all other versions: /R /W)</p>
</blockquote>

<p>RT-N16, RT-N66U, RT-AC66U是<a href="https://en.wikipedia.org/wiki/MIPS_instruction_set">MIPS</a>架构的CPU，建议最好格式化成EXT3.</p>

<blockquote>
  <p>For usb hdd ARM devices is EXT4 (RT-AC56U, RT-AC68U, RT-AC87U, RT-AC88U, RT-AC3200, RT-AC5300 and all other versions: /P /R /W)</p>
</blockquote>

<p>RT-AC56U, RT-AC68U, RT-AC87U, RT-AC88U, RT-AC3200, RT-AC5300是<a href="https://en.wikipedia.org/wiki/ARM_architecture">ARM</a>架构的CPU，建议最好格式化成EXT4.</p>

<p>华硕路由器系统是Linux，对windows的NTFS和FAT32支持并不好，所以建议外接硬盘使用EXT4或者EXT3，如果都不支持也许应该升级路由器了。</p>

<h2 id="section">参考文章</h2>

<p><a href="https://www.hqt.ro/how-to-format-usb-drive/">How to Format Usb Drive</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[pkcs11-helper编译]]></title>
    <link href="http://xixitalk.github.io/blog/2016/11/01/pkcs11-helper-build/"/>
    <updated>2016-11-01T18:37:08+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/11/01/pkcs11-helper-build</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/OpenSC/pkcs11-helper/releases">pkcs11-helper</a>也真是的，软件包里<code>INSTALL</code>里说用<code>./configure</code>生成<code>Makefile</code>，但是软件包还没有<code>configure</code>文件，需要<code>autoreconf</code>生成<code>configure</code>文件。妈蛋，<code>INSTALL</code>多写一句<code>autoreconf -ivf</code>会死吗？</p>

<!--more-->

<h1 id="section">准备</h1>

<p>确保系统安装了<code>autoconf</code> <code>automake</code> <code>libtool</code></p>

<h1 id="section-1">下载源代码解压</h1>

<p><code>
$wget https://github.com/OpenSC/pkcs11-helper/archive/pkcs11-helper-1.10.tar.gz
$tar -zxvf pkcs11-helper-1.10.tar.gz
$cd pkcs11-helper-pkcs11-helper-1.10
</code></p>

<h1 id="makefile">生成Makefile</h1>

<p><code>
$autoreconf -ivf
$./configure
</code></p>

<h1 id="section-2">编译安装</h1>

<p><code>
$make
$make install
</code></p>

<h1 id="section-3">参考</h1>

<p><a href="https://github.com/OpenSC/pkcs11-helper/issues/2">https://github.com/OpenSC/pkcs11-helper/issues/2</a></p>

]]></content>
  </entry>
  
</feed>
