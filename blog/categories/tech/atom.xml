<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: tech | xixitalk's snippet]]></title>
  <link href="http://xixitalk.github.io/blog/categories/tech/atom.xml" rel="self"/>
  <link href="http://xixitalk.github.io/"/>
  <updated>2016-10-10T07:36:21+00:00</updated>
  <id>http://xixitalk.github.io/</id>
  <author>
    <name><![CDATA[xixitalk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TCP/IP之以太网帧]]></title>
    <link href="http://xixitalk.github.io/blog/2016/10/10/Ethernet-of-tcpip/"/>
    <updated>2016-10-10T10:15:46+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/10/10/Ethernet-of-tcpip</id>
    <content type="html"><![CDATA[<h3 id="ethernet-iiv2">Ethernet II(以太网V2帧)</h3>

<!--more-->

<table border="1">
  <thead>
    <tr>
      <th>6字节</th>
      <th>6字节</th>
      <th>2字节</th>
      <th>46-1500字节</th>
      <th>4字节</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>目标MAC地址</td>
      <td>源MAC地址</td>
      <td>类型</td>
      <td>数据</td>
      <td>FCS</td>
    </tr>
  </tbody>
</table>

<p><strong>类型</strong>：  08 00 是IP包，08 06 是ARP包<br />
<strong>数据</strong>：  最常见的是IP包<br />
<strong>FCS</strong>：   Frame check sequence帧校验序列  </p>

<p>更多常见类型：  </p>

<table border="1">
  <thead>
    <tr>
      <th>类型值</th>
      <th>解释</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>0x0800</td>
      <td>网际协议（IP）</td>
    </tr>
    <tr>
      <td>0x0806</td>
      <td>地址解析协议（ARP ： Address Resolution Protocol）</td>
    </tr>
    <tr>
      <td>0x0808</td>
      <td>帧中继 ARP （Frame Relay ARP） [RFC1701]</td>
    </tr>
    <tr>
      <td>0x814C</td>
      <td>简单网络管理协议（SNMP：Simple Network Management Protocol）</td>
    </tr>
    <tr>
      <td>0x86DD</td>
      <td>网际协议v6 （IPv6，Internet Protocol version 6）</td>
    </tr>
    <tr>
      <td>0x880B</td>
      <td>点对点协议（PPP：Point-to-Point Protocol）</td>
    </tr>
    <tr>
      <td>0x8847</td>
      <td>多协议标签交换（单播）（MPLS：Multi-Protocol Label Switching unicast）</td>
    </tr>
    <tr>
      <td>0x8848</td>
      <td>多协议标签交换（组播）（MPLS, Multi-Protocol Label Switching multicast）</td>
    </tr>
  </tbody>
</table>

<p>More Read  <a href="http://technow.blog.51cto.com/746816/320773">http://technow.blog.51cto.com/746816/320773</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DNS在HTTP网络交互流程中的位置]]></title>
    <link href="http://xixitalk.github.io/blog/2016/10/09/http-connection/"/>
    <updated>2016-10-09T08:55:37+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/10/09/http-connection</id>
    <content type="html"><![CDATA[<p>DNS在HTTP网络交互流程中的位置</p>

<!--more-->

<p>一个简单的HTTP请求流程（C语言版）</p>

<ol>
  <li>建立socket(socket())</li>
  <li>由域名查询到IP(getaddrinfo()或者gethostbyname())</li>
  <li>建立连接(connect())</li>
  <li>按照HTTP协议要求发送数据(send())</li>
  <li>监听socket等待接收数据(select())</li>
  <li>监听到数据后接收数据(recv())</li>
  <li>按照HTTP协议解析数据，再发生数据或者结束</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的AStyle配置选项]]></title>
    <link href="http://xixitalk.github.io/blog/2016/07/11/my-AStyle-config/"/>
    <updated>2016-07-11T18:35:57+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/07/11/my-AStyle-config</id>
    <content type="html"><![CDATA[<p>我的AStyle代码格式工具的选项：AStyle.exe -A1 -C -S -K -Y -f -s4 -p -U -o -n main.c</p>

<p>在<code>notepad++</code>里添加：<code>运行(R)--运行(R)</code> 选择AStyle.exe，选项输入<code>-A1 -C -S -K -Y -f -s4 -p -U -o -n "$(FULL_CURRENT_PATH)"</code>，然后点击<code>保存</code>，这样就保存在运行菜单里了。每次使用从<code>运行(R)</code>点击即可。</p>

<!--more-->

<p>简略选项：<code>-A1 -C -S -K -Y -f -s4 -p -U -o -n</code>
对应长选项如下：</p>

<p><code>
--style=bsd
--indent-classes
--indent-switches
--indent-cases
--indent-col1-comments
--break-blocks
--indent=spaces=4
--pad-oper
--unpad-paren
--keep-one-line-statements
--suffix=none
</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[UINT32引起的死循环]]></title>
    <link href="http://xixitalk.github.io/blog/2016/07/09/dead-loop-UINT32/"/>
    <updated>2016-07-09T10:02:35+00:00</updated>
    <id>http://xixitalk.github.io/blog/2016/07/09/dead-loop-UINT32</id>
    <content type="html"><![CDATA[<p>UINT32 引起的死循环</p>

<!--more-->

<p>上周出差定位一个死循环。一个函数进行一个信号量的初始化，每次进行一次业务都要调用这个函数初始化，这个函数作用是保障初始化后信号量初始化值为<code>SEM_INIT_NUM</code>，但因为<code>UINT32</code>的关系出现死循环了。代码如下：</p>

<script src="https://gist.github.com/xixitalk/5c176a78a8743465061ef15ab5f9a248.js"></script>

<p>出现问题的时候，<code>semCount</code>为4，而宏<code>SEM_INIT_NUM</code>为3，造成<code>Count = SEM_INIT_NUM - semCount</code>为<code>-1</code>了，但因为<code>Count</code>是<code>UINT32</code>，从而变成<code>0xFFFFFFFF</code>，一个极大值，造成for循环执行长时间不退出。修改方法是将<code>Count</code>的<code>UINT32</code>改成<code>SINT32</code>。这是一个非常低级的代码错误。</p>

<p>其实更简单的是删除信号量，重新创建信号量，这样代码会容易读的多。</p>

<p><code>
DeleteSemaphore(ptxSem);
ptxSem = CreateSemaphore(SEM_INIT_NUM);
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[免费申请S/MIME证书]]></title>
    <link href="http://xixitalk.github.io/blog/2014/06/21/Free-SMIME-Certificate-Key/"/>
    <updated>2014-06-21T00:05:11+00:00</updated>
    <id>http://xixitalk.github.io/blog/2014/06/21/Free-SMIME-Certificate-Key</id>
    <content type="html"><![CDATA[<h2 id="section">申请证书</h2>
<p>从这里可以申请到免费的S/MIME 邮件证书：<a href="http://www.instantssl.com/ssl-certificate-products/free-email-certificate.html">http://www.instantssl.com/ssl-certificate-products/free-email-certificate.html</a>，
提交生成之后会把证书发送到邮箱里。</p>

<h2 id="section-1">证书安装</h2>
<p>在邮箱里点击连接就会把证书安装到电脑系统中（包括windows和Mac OSX)。<br />
证书认证关系如下：  </p>

<ul>
  <li>第一级根证书USERTrust(UTN-USERFirst-Client Authentication and Email)，系统中默认都带了；</li>
  <li>第二级中级证书是COMODO Client Authentication and Secure Email CA;</li>
  <li>第三级才是刚刚申请的个人证书。<br />
如果在证书管理器查看刚刚申请的个人证书显示不正常的话，说明系统中缺少第二级中级证书，从这里下载安装<a href="http://crt.comodoca.com/COMODOClientAuthenticationandSecureEmailCA.crt">http://crt.comodoca.com/COMODOClientAuthenticationandSecureEmailCA.crt</a>。</li>
</ul>

<h2 id="ios">证书安装到iOS系统</h2>
<p>在电脑系统里打开证书管理器（windows系统是运行certmgr.msc），把证书（包含私钥）导出，windows是pfx格式，Mac OSX是p12格式，导出的证书要设置私钥保护密码，iOS的证书安装需要输入这个密码。把这个pfx或者p12格式的证书发邮件到iOS上，点击打开即提示安装，输入之前的保护密码就安装到iOS系统中了。<br />
同样，iOS系统中缺少第二级中级证书，从这里下载安装<a href="http://crt.comodoca.com/COMODOClientAuthenticationandSecureEmailCA.crt">http://crt.comodoca.com/COMODOClientAuthenticationandSecureEmailCA.crt</a>。</p>

<!--more-->

<h2 id="ios-1">iOS里启用加密和签名</h2>
<p>在iOS-邮件、通讯录、日历-邮件帐户-高级 启用S/MIME，选择上面安装的证书。iOS自带的mail程序发邮件即可自动进行加密和签名。</p>

<h2 id="section-2">群发公钥证书</h2>
<p>在电脑证书管理里导出证书（不包含私钥），windows是cer文件，把这个文件群发出来告诉朋友。别人给你发邮件就用这个证书进行加密。</p>

<h2 id="smime">我的S/MIME证书</h2>
<p>我的S/MIME证书<a href="http://xixitalk.github.io/static/pub.cer">http://xixitalk.github.io/static/pub.cer</a>,欢迎用S/MIME给我发邮件。你的系统也可能需要安装第二级COMODO的证书，从这里下载安装<a href="http://crt.comodoca.com/COMODOClientAuthenticationandSecureEmailCA.crt">http://crt.comodoca.com/COMODOClientAuthenticationandSecureEmailCA.crt</a>。</p>

<h2 id="section-3">其他参考</h2>
<p>Mac OSX导出证书到iOS参考<a href="http://feinstruktur.com/blog/2011/12/12/using-smime-on-ios-devices.html">http://feinstruktur.com/blog/2011/12/12/using-smime-on-ios-devices.html</a></p>
]]></content>
  </entry>
  
</feed>
