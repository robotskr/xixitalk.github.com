<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: proxy | xixitalk's snippet]]></title>
  <link href="http://xixitalk.github.io/blog/categories/proxy/atom.xml" rel="self"/>
  <link href="http://xixitalk.github.io/"/>
  <updated>2017-11-13T08:13:09+00:00</updated>
  <id>http://xixitalk.github.io/</id>
  <author>
    <name><![CDATA[xixitalk]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[树莓派3上编译haproxy]]></title>
    <link href="http://xixitalk.github.io/blog/2017/09/03/compile-haproxy-on-raspberry3/"/>
    <updated>2017-09-03T06:01:08+00:00</updated>
    <id>http://xixitalk.github.io/blog/2017/09/03/compile-haproxy-on-raspberry3</id>
    <content type="html"><![CDATA[<p>最近发现树莓派上haproxy有点问题，Google Play下载有些不正常。所以想更新编译haproxy。raspbian软件仓库的haproxy的版本比较低，所以直接下载haproxy源代码编译。更新过程记录下来。</p>

<!--more-->

<p>为了配置省事，建议先安装raspbian软件仓库里的haproxy，然后编译好的haproxy的直接覆盖，这样启动配置不用费心配置。</p>

<p>1、下载源代码并解压</p>

<p><code>
wget http://www.haproxy.org/download/1.7/src/haproxy-1.7.9.tar.gz
tar xzvf haproxy-1.7.9.tar.gz
cd haproxy-1.7.9/
</code></p>

<p>2、编译</p>

<p>haproxy不能直接make，需要带配置参数。先查看已经安装的haproxy的编译参数。</p>

<p><code>
haproxy -vv OPTIONS = USE_GETADDRINFO=1
</code></p>

<p>执行上面的命令会得到类似以下信息。</p>

<p><code>
Build options :
  TARGET  = linux2628
  CPU     = generic
  CC      = gcc
  CFLAGS  = -O2 -g -fno-strict-aliasing -Wdeclaration-after-statement
  OPTIONS =
</code></p>

<p>make编译</p>

<p><code>
make  TARGET=linux2628   CPU=generic  CFLAGS="-O2 -g -fno-strict-aliasing -Wdeclaration-after-statement"
</code></p>

<p>正常编译完，在haproxy-1.7.9目录下就会生成haproxy可执行文件。用<code>./haproxy -vv</code>查看编译好的haproxy版本号。</p>

<p>3、替换系统里的haproxy</p>

<p><code>
$which haproxy
/usr/sbin/haproxy
$sudo service haproxy stop
$sudo cp ./haproxy /usr/sbin/haproxy
$sudo service haproxy start
</code></p>

<p>4、haproxy负载平衡shadowsocks配置参考</p>

<p><code>14826</code>是haproxy提供的端口，<code>12222</code>是haproxy的状态web端口，可以用浏览器访问http://IP:12222查看haproxy状态。<code>j1.vps.com</code>等是多个SS server端。SS local访问haproxy的<code>14826</code>端口，IP为haproxy的侦听IP，SS local其他配置和直接访问SS server是一样的。</p>

<p>```
global
ulimit-n 51200
defaults
log global
mode tcp
option dontlognull
balance roundrobin
option persist
timeout connect 10000
timeout client 150000
timeout server 150000</p>

<p>listen stats
bind *:12222
mode http
stats enable
stats uri /
stats refresh 10s</p>

<p>retries 1
option redispatch
frontend ss-in
bind *:14826
default_backend ss-out
backend ss-out
server j1 j1.vps.com:29777 maxconn 20480 weight 1
server j2 j2.vps.com:29777 maxconn 20480 weight 100
server us0 us0.vps.com:29777 maxconn 20480 weight 1 backup
server us1 us1.vps.com:29777 maxconn 20480 weight 1 backup
server us2 us2.vps.com:29777 maxconn 20480 weight 1 backup
server us3 us3.vps.com:29777 maxconn 20480 weight 1 backup
```</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git ssh使用代理]]></title>
    <link href="http://xixitalk.github.io/blog/2013/07/12/git-ssh-proxy/"/>
    <updated>2013-07-12T08:23:33+00:00</updated>
    <id>http://xixitalk.github.io/blog/2013/07/12/git-ssh-proxy</id>
    <content type="html"><![CDATA[<p>昨天在树莓派上发现通过<code>ssh</code>方式向<code>github.com</code>的代码仓库<code>git push</code>代码一直提示连接<code>github.com</code>的22端口失败。而<code>HTTP</code>和<code>HTTPS</code>访问<code>github.com</code>正常，怀疑<code>github.com</code>的22端口被墙了。使用<code>ssh</code>方式的特点是可以不用输入密码，方便在shell里进行自动操作，而<code>https</code>需要输入密码。</p>

<p>树莓派上有<code>socks5</code>代理和<code>http</code>代理，下面配置<code>git ssh</code>通过代理进行<code>git</code>操作。</p>

<!--more-->

<p>代理分两个部分，一个是ssh协议的的代理，一个是git协议的代理。</p>

<h2 id="git">第一部分 配置git协议的代理</h2>

<p>配置git socks5代理</p>

<p><code>
git config --global http.proxy 'socks5://127.0.0.1:1081' 
git config --global https.proxy 'socks5://127.0.0.1:1081' 
</code></p>

<p>或者配置git http代理</p>

<p><code>
git config --global https.proxy 'http://127.0.0.1:8080'
git config --global https.proxy 'https://127.0.0.1:8080'
</code></p>

<p><code>git config --global</code>会保存在<code>.gitconfig</code>文件里，可以用cat检查代理配置，或者用<code>git config --global -l</code>检查也可以。</p>

<p><code>
$cat ~/.gitconfig
[http]
        proxy = socks5://127.0.0.1:1081
[https]
        proxy = socks5://127.0.0.1:1081
</code></p>

<p>取消代理配置</p>

<p><code>
git config --global --unset http.proxy
git config --global --unset https.proxy
</code></p>

<h2 id="ssh">第二部分 配置ssh的代理</h2>

<h3 id="git-sshsocks5">git ssh通过socks5代理</h3>
<p><a href="http://chunyemen.org/archives/813">在Mac OSX上通过SSH代理实现github访问</a></p>

<h3 id="git-sshhttp">git ssh通过http代理</h3>
<p><a href="http://blog.yxwang.me/2010/05/git-through-https-proxy/">利用 HTTPS 代理访问 GitHub</a></p>

<h3 id="section">我的配置</h3>
<p>通过<code>socks5</code>代理配置比较繁琐，配置后<code>git push</code>成功了一次，但是后面还是一直提示失败，找不到原因。后来改用<code>http</code>代理，代理成功。我的详细配置如下。</p>

<h4 id="corkscrew">安装corkscrew</h4>
<p>如果系统里没有安装<code>corkscrew</code>，进行安装。</p>

<p><code>
sudo apt-get install corkscrew
</code></p>

<h4 id="sshconfig">配置ssh的.config</h4>
<p>配置<code>~/.ssh/config</code>,如果<code>config</code>没有创建一个。我的<code>http</code>代理是<code>127.0.0.1:8118</code>，用户名是<code>pi</code>。</p>

<p><code>
Host github.com
User git
ProxyCommand corkscrew 127.0.0.1 8118 %h %p
IdentityFile /home/pi/.ssh/id_rsa
</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搭建带代理的奶瓶腿]]></title>
    <link href="http://xixitalk.github.io/blog/2013/06/15/netputweets-proxy/"/>
    <updated>2013-06-15T21:39:29+00:00</updated>
    <id>http://xixitalk.github.io/blog/2013/06/15/netputweets-proxy</id>
    <content type="html"><![CDATA[<p>今天证实了一个猜想：因为奶瓶腿连接twitter API是通过cURL模块，而cURL本身支持proxy，所以在国内可以搭建奶瓶腿，只要加上代理就可以正常使用。代理可以是shadowsocks转换的socks代理，也可以是再通过polipo进一步转化的HTTP代理。</p>

<!--more-->

<h3 id="section">下载奶瓶腿代码</h3>

<p>把奶瓶腿的代码放在apache的浏览的根目录：</p>

<p><code>
git clone git@github.com:netputer/netputweets.git
</code></p>

<p>可以将目录netputweets修改为t。</p>

<h3 id="section-1">安装好奶瓶腿所要的环境</h3>

<p>apache、php5+、cURL、URL Rewrite等，这部分略过。</p>

<h3 id="section-2">添加代理</h3>

<p>假设代理是：HTTP 192.168.1.106:8118,其他格式代理相应修改。<br />
修改img.php、class.upload.php、twitter.php、handler.php文件里在所有执行<code>curl_exec</code>函数前添加：</p>

<p><code>
curl_setopt($ch, CURLOPT_PROXY, '192.168.1.106:8118');
</code></p>

<p><code>setup.php</code>文件里的<code>curl_exec</code>前不要修改。</p>

<h3 id="section-3">安装奶瓶腿</h3>

<p>浏览器里访问http://xxxxx.org/t/setup.php，进行奶瓶腿安装。安装后正常进行twitter帐号关联。</p>

<p><img src="https://pbs.twimg.com/media/BMzloh6CMAEonlF.png:large" alt="netputweets" /></p>

<h3 id="base64">推文两次base64编码防止敏感词过滤</h3>

<p>推文进行base64两次编码，客户端浏览器进行base64两次解码，这样可以防止敏感词过滤。缺点是按照base64的特点两次编码推文字节会变成原来的<script type="math/tex"> \frac{16}{9} </script>。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[stunnel原理]]></title>
    <link href="http://xixitalk.github.io/blog/2013/04/08/stunnel-principle/"/>
    <updated>2013-04-08T16:31:00+00:00</updated>
    <id>http://xixitalk.github.io/blog/2013/04/08/stunnel-principle</id>
    <content type="html"><![CDATA[<p>搜索关键词：stunnel proxy socks5 HTTP HTTPS 代理</p>

<p>stunnel原理如图：</p>

<!--more-->

<p><a href="/static/images/2013/04/stunnel.png"><img src="/static/images/2013/04/stunnel.png" alt="stunnel原理图" /></a></p>

<p>具体教程可参见下面篇博文：<br />
<a href="https://w3.owind.com/pub/ssledge/">搭建SSLedge HTTPS代理</a><br />
<a href="https://wido.me/sunteya/setup-a-socks-proxy-server-pass-by-secure-firewall/">通过 stunnel 搭建安全高性能的 sockts 代理服务器</a><br />
<a href="http://www.ibm.com/developerworks/cn/security/s-stun/">使用 Stunnel 加密 如何在 SSL 内加密任意 TCP 连接</a>(提醒这篇文章发表于2001年，现在看来可能部分配置不适用)  </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[android上支持HTTP proxy代理的浏览器]]></title>
    <link href="http://xixitalk.github.io/blog/2013/03/11/android-broswer-with-http-proxy/"/>
    <updated>2013-03-11T17:07:00+00:00</updated>
    <id>http://xixitalk.github.io/blog/2013/03/11/android-broswer-with-http-proxy</id>
    <content type="html"><![CDATA[<p>之前一篇文章讲了在树莓派上搭建HTTP proxy的<a href="/blog/2013/03/02/raspberry-pi-proxy/">原理</a>，这样就获得一个HTTP proxy，android上的<a href="https://play.google.com/store/apps/details?id=org.mariotaku.twidere">twidere</a>和<a href="https://play.google.com/store/apps/details?id=com.twitter.android">twitter</a>都支持HTTP proxy，可以在设置里进行配置。但是从<a href="https://play.google.com/store/apps/details?id=org.mariotaku.twidere">twidere</a>或者<a href="https://play.google.com/store/apps/details?id=com.twitter.android">twitter</a>打开网页又打不开了。这次推荐三个支持HTTP proxy的浏览器。  </p>

<!--more-->

<h3 id="firefox">Firefox</h3>
<p>android上的<a href="https://play.google.com/store/apps/details?id=org.mozilla.firefox">Firefox</a>可以通过安装<a href="https://addons.mozilla.org/zh-CN/android/addon/proxy-mobile/">Proxy Mobile</a>附加组件支持HTTP proxy，还支持DNS通过SOCKS进行远程解析。<br />
优点：支持多tab页面，浏览器功能完整<br />
缺点：速度比较慢,最新版本的firefox有可能Proxy Mobile附件组件不兼容</p>

<h3 id="orweb-v2">orweb v2</h3>
<p><a href="https://play.google.com/store/apps/details?id=info.guardianproject.browser">orweb v2浏览器</a>原本是配合tor的android版本<a href="https://play.google.com/store/apps/details?id=org.torproject.android">orbot</a>的代理的，但是可以自定义其他的HTTP proxy。<br />
优点：打开网页速度很快<br />
缺点：1、只能打开一个页面；2、如果没安装orbot，每次第一次打开浏览器都会提示系统没有安装orbot；3、如果在页面点击链接很深入之后，返回会按原路返回。</p>

<h3 id="section">蓝火焰浏览器</h3>
<p><a href="https://play.google.com/store/apps/details?id=com.blueflame.web&amp;hl=zh_CN">蓝火焰浏览器</a>是用android 2.x系统的浏览器框架封装的一个轻量级的浏览器。<br />
优点：支持多tab页面浏览<br />
缺点：打开t.co等缩短网站每次展开都提示用户选择浏览器，速度慢。</p>

<p>总结：如果从应用里打开网页推荐orweb v2，如果长时间浏览推荐使用firefox。</p>

]]></content>
  </entry>
  
</feed>
